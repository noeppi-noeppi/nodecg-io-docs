{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"nodecg-io nodecg-io is a NodeCG -bundle that implements Social Media API's in the NodeCG framework About nodecg-io nodecg-io is the successor of ChatOverflow . The aim of this bundle is to simplify the code and expand the number of integrated services. The main goal is to increase the number of supported APIs to save you development time. How to use nodecg-io If you want to use nodecg-io, you should note that it is only a framework for your bundle, so you need at least a basic knowledge of the programming language JavaScript or any other language that compiles to JavaScript like TypeScript. If that's no problem you can head over to the installation guide and take a look at the available nodecg-io services . Implemented Services and Interfaces AutoHotkey Android (using adb) CurseForge Discord IntelliJ IDEs IRC (Internet Relay Chat) MIDI Input MIDI Output Nanoleafs OBS Philips Hue RCON Reddit sACN Receiver sACN Sender Serial Port (Arduino) Slack WebAPI Spotify Elgato Stream Deck StreamElements Telegram TIANE TipeeeStream Twitch Addons Twitch API Twitch Chat Twitch PubSub Twitter WebSocket Client WebSocket Server Xdotool YouTube How to contribute If you want to contribute to this bundle you can implement one of those services or fix an issue . Before contributing head over to the How to contribute - Guide.","title":"Home"},{"location":"#nodecg-io","text":"nodecg-io is a NodeCG -bundle that implements Social Media API's in the NodeCG framework","title":"nodecg-io"},{"location":"#about-nodecg-io","text":"nodecg-io is the successor of ChatOverflow . The aim of this bundle is to simplify the code and expand the number of integrated services. The main goal is to increase the number of supported APIs to save you development time.","title":"About nodecg-io"},{"location":"#how-to-use-nodecg-io","text":"If you want to use nodecg-io, you should note that it is only a framework for your bundle, so you need at least a basic knowledge of the programming language JavaScript or any other language that compiles to JavaScript like TypeScript. If that's no problem you can head over to the installation guide and take a look at the available nodecg-io services .","title":"How to use nodecg-io"},{"location":"#implemented-services-and-interfaces","text":"AutoHotkey Android (using adb) CurseForge Discord IntelliJ IDEs IRC (Internet Relay Chat) MIDI Input MIDI Output Nanoleafs OBS Philips Hue RCON Reddit sACN Receiver sACN Sender Serial Port (Arduino) Slack WebAPI Spotify Elgato Stream Deck StreamElements Telegram TIANE TipeeeStream Twitch Addons Twitch API Twitch Chat Twitch PubSub Twitter WebSocket Client WebSocket Server Xdotool YouTube","title":"Implemented Services and Interfaces"},{"location":"#how-to-contribute","text":"If you want to contribute to this bundle you can implement one of those services or fix an issue . Before contributing head over to the How to contribute - Guide.","title":"How to contribute"},{"location":"dependencies/","text":"Dependency Graph \u00abcore\u00bb nodecg-io-core \u00ablib\u00bb ajv \u00ablib\u00bb crypto-js \u00ablib\u00bb tslib \u00abservice\u00bb nodecg-io-ahk \u00ablib\u00bb node-fetch \u00abservice\u00bb nodecg-io-android \u00ablib\u00bb @rauschma/stringio \u00ablib\u00bb get-stream \u00abservice\u00bb nodecg-io-curseforge \u00abservice\u00bb nodecg-io-debug \u00ablib\u00bb monaco-editor \u00abservice\u00bb nodecg-io-discord \u00ablib\u00bb discord.js \u00abservice\u00bb nodecg-io-gsheets \u00ablib\u00bb @types/gapi \u00ablib\u00bb express \u00ablib\u00bb googleapis \u00ablib\u00bb open \u00abservice\u00bb nodecg-io-intellij \u00abservice\u00bb nodecg-io-irc \u00ablib\u00bb @types/irc \u00ablib\u00bb irc \u00abservice\u00bb nodecg-io-midi-input \u00ablib\u00bb easymidi \u00abservice\u00bb nodecg-io-midi-output \u00abservice\u00bb nodecg-io-nanoleaf \u00ablib\u00bb @types/node-fetch \u00abservice\u00bb nodecg-io-obs \u00ablib\u00bb obs-websocket-js \u00abservice\u00bb nodecg-io-philipshue \u00ablib\u00bb is-ip \u00ablib\u00bb node-hue-api \u00abservice\u00bb nodecg-io-rcon \u00ablib\u00bb rcon-client \u00abservice\u00bb nodecg-io-reddit \u00ablib\u00bb reddit-ts \u00abservice\u00bb nodecg-io-sacn-receiver \u00ablib\u00bb sacn \u00abservice\u00bb nodecg-io-sacn-sender \u00abservice\u00bb nodecg-io-serial \u00ablib\u00bb @serialport/parser-readline \u00ablib\u00bb @types/serialport \u00ablib\u00bb serialport \u00abservice\u00bb nodecg-io-slack \u00ablib\u00bb @slack/web-api \u00abservice\u00bb nodecg-io-spotify \u00ablib\u00bb @types/spotify-web-api-node \u00ablib\u00bb spotify-web-api-node \u00abservice\u00bb nodecg-io-streamdeck \u00ablib\u00bb elgato-stream-deck \u00abservice\u00bb nodecg-io-streamelements \u00ablib\u00bb @types/socket.io-client \u00ablib\u00bb socket.io-client \u00abservice\u00bb nodecg-io-telegram \u00ablib\u00bb @types/node-telegram-bot-api \u00ablib\u00bb node-telegram-bot-api \u00abservice\u00bb nodecg-io-template \u00abservice\u00bb nodecg-io-tiane \u00ablib\u00bb ws \u00abservice\u00bb nodecg-io-twitch-addons \u00ablib\u00bb nodecg-io-twitch-auth \u00abservice\u00bb nodecg-io-twitch-api \u00ablib\u00bb twitch \u00abservice\u00bb nodecg-io-twitch-chat \u00ablib\u00bb twitch-chat-client \u00abservice\u00bb nodecg-io-twitch-pubsub \u00ablib\u00bb twitch-pubsub-client \u00abservice\u00bb nodecg-io-twitter \u00ablib\u00bb @types/twitter \u00ablib\u00bb twitter \u00abservice\u00bb nodecg-io-websocket-client \u00ablib\u00bb @types/ws \u00abservice\u00bb nodecg-io-websocket-server \u00abservice\u00bb nodecg-io-xdotool \u00abservice\u00bb nodecg-io-youtube","title":"Dependency Graph"},{"location":"dependencies/#dependency-graph","text":"\u00abcore\u00bb nodecg-io-core \u00ablib\u00bb ajv \u00ablib\u00bb crypto-js \u00ablib\u00bb tslib \u00abservice\u00bb nodecg-io-ahk \u00ablib\u00bb node-fetch \u00abservice\u00bb nodecg-io-android \u00ablib\u00bb @rauschma/stringio \u00ablib\u00bb get-stream \u00abservice\u00bb nodecg-io-curseforge \u00abservice\u00bb nodecg-io-debug \u00ablib\u00bb monaco-editor \u00abservice\u00bb nodecg-io-discord \u00ablib\u00bb discord.js \u00abservice\u00bb nodecg-io-gsheets \u00ablib\u00bb @types/gapi \u00ablib\u00bb express \u00ablib\u00bb googleapis \u00ablib\u00bb open \u00abservice\u00bb nodecg-io-intellij \u00abservice\u00bb nodecg-io-irc \u00ablib\u00bb @types/irc \u00ablib\u00bb irc \u00abservice\u00bb nodecg-io-midi-input \u00ablib\u00bb easymidi \u00abservice\u00bb nodecg-io-midi-output \u00abservice\u00bb nodecg-io-nanoleaf \u00ablib\u00bb @types/node-fetch \u00abservice\u00bb nodecg-io-obs \u00ablib\u00bb obs-websocket-js \u00abservice\u00bb nodecg-io-philipshue \u00ablib\u00bb is-ip \u00ablib\u00bb node-hue-api \u00abservice\u00bb nodecg-io-rcon \u00ablib\u00bb rcon-client \u00abservice\u00bb nodecg-io-reddit \u00ablib\u00bb reddit-ts \u00abservice\u00bb nodecg-io-sacn-receiver \u00ablib\u00bb sacn \u00abservice\u00bb nodecg-io-sacn-sender \u00abservice\u00bb nodecg-io-serial \u00ablib\u00bb @serialport/parser-readline \u00ablib\u00bb @types/serialport \u00ablib\u00bb serialport \u00abservice\u00bb nodecg-io-slack \u00ablib\u00bb @slack/web-api \u00abservice\u00bb nodecg-io-spotify \u00ablib\u00bb @types/spotify-web-api-node \u00ablib\u00bb spotify-web-api-node \u00abservice\u00bb nodecg-io-streamdeck \u00ablib\u00bb elgato-stream-deck \u00abservice\u00bb nodecg-io-streamelements \u00ablib\u00bb @types/socket.io-client \u00ablib\u00bb socket.io-client \u00abservice\u00bb nodecg-io-telegram \u00ablib\u00bb @types/node-telegram-bot-api \u00ablib\u00bb node-telegram-bot-api \u00abservice\u00bb nodecg-io-template \u00abservice\u00bb nodecg-io-tiane \u00ablib\u00bb ws \u00abservice\u00bb nodecg-io-twitch-addons \u00ablib\u00bb nodecg-io-twitch-auth \u00abservice\u00bb nodecg-io-twitch-api \u00ablib\u00bb twitch \u00abservice\u00bb nodecg-io-twitch-chat \u00ablib\u00bb twitch-chat-client \u00abservice\u00bb nodecg-io-twitch-pubsub \u00ablib\u00bb twitch-pubsub-client \u00abservice\u00bb nodecg-io-twitter \u00ablib\u00bb @types/twitter \u00ablib\u00bb twitter \u00abservice\u00bb nodecg-io-websocket-client \u00ablib\u00bb @types/ws \u00abservice\u00bb nodecg-io-websocket-server \u00abservice\u00bb nodecg-io-xdotool \u00abservice\u00bb nodecg-io-youtube","title":"Dependency Graph"},{"location":"services/","text":"Available nodecg-io services nodecg-io-core The core of nodecg-io. Connects everything up. Depends on ajv @ ^7.2.1 Depends on crypto-js @ ^4.0.0 Depends on tslib @ ^2.1.0 nodecg-io-ahk Allows you to send commands to AutoHotkey. See the sample implementation Depends on node-fetch @ ^2.6.1 Depends on nodecg-io-core @ ^0.2.0 nodecg-io-android Allows to connect to an android device via adb. See the sample implementation Depends on @rauschma/stringio @ ^1.4.0 Depends on get-stream @ ^6.0.0 Depends on nodecg-io-core @ ^0.2.0 nodecg-io-curseforge A service to communicate with the CurseForge API. See the sample implementation Depends on node-fetch @ ^2.6.1 Depends on nodecg-io-core @ ^0.2.0 nodecg-io-debug Debug helper service that helps to easily trigger your code for debugging purposes. See the sample implementation Depends on nodecg-io-core @ ^0.2.0 Depends on monaco-editor @ ^0.23.0 nodecg-io-discord Allows to connect to discord via a discord-bot. See the sample implementation Depends on discord.js @ ^12.5.1 Depends on nodecg-io-core @ ^0.2.0 nodecg-io-gsheets Allow to control Google Sheets. There's no sample implementation for this service yet. Depends on @types/gapi @ ^0.0.39 Depends on express @ ^4.17.1 Depends on googleapis @ ^67.1.1 Depends on nodecg-io-core @ ^0.2.0 Depends on open @ ^8.0.2 nodecg-io-intellij Allows to control JetBrains IDEs via nodecg-io See the sample implementation Depends on node-fetch @ ^2.6.1 Depends on nodecg-io-core @ ^0.2.0 nodecg-io-irc Allow to connect to IRC Servers. See the sample implementation Depends on @types/irc @ ^0.5.0 Depends on irc @ ^0.5.2 Depends on nodecg-io-core @ ^0.2.0 nodecg-io-midi-input Connect to MIDI devices and control the volume of your voice or music with a fader. See the sample implementation Depends on easymidi @ ^2.0.1 Depends on nodecg-io-core @ ^0.2.0 nodecg-io-midi-output Connect to MIDI devices and control the volume of your voice or music with a fader. See the sample implementation Depends on easymidi @ ^2.0.1 Depends on nodecg-io-core @ ^0.2.0 nodecg-io-nanoleaf Allows to connect to a nanoleaf controller and trigger custom lighting effects. There's no sample implementation for this service yet. Depends on @types/node-fetch @ ^2.5.8 Depends on node-fetch @ ^2.6.1 Depends on nodecg-io-core @ ^0.2.0 nodecg-io-obs Allows to control your obs instance to e.g. switch scenes. See the sample implementation Depends on nodecg-io-core @ ^0.2.0 Depends on obs-websocket-js @ ^4.0.2 nodecg-io-philipshue Allows you to connect with your Philips Hue bridge. This allows you to control your lights etc. See the sample implementation Depends on is-ip @ ^3.1.0 Depends on node-hue-api @ ^4.0.9 Depends on nodecg-io-core @ ^0.2.0 nodecg-io-rcon Allows you to send commands to a minecraft server via RCON. See the sample implementation Depends on nodecg-io-core @ ^0.2.0 Depends on rcon-client @ ^4.2.3 nodecg-io-reddit Provides an interface to the Reddit-API. See the sample implementation Depends on nodecg-io-core @ ^0.2.0 Depends on reddit-ts @ noeppi-noeppi/npm-reddit-ts#build nodecg-io-sacn-receiver Allows you to receive data via sACN from e.g professional lighting consoles. See the sample implementation Depends on nodecg-io-core @ ^0.2.0 Depends on sacn @ ^3.2.1 nodecg-io-sacn-sender Allows you to send data via sACN to e.g professional lights. See the sample implementation Depends on nodecg-io-core @ ^0.2.0 Depends on sacn @ ^3.2.1 nodecg-io-serial Exposes serial deivces to nodecg-io See the sample implementation Depends on @serialport/parser-readline @ ^9.0.7 Depends on @types/serialport @ ^8.0.1 Depends on nodecg-io-core @ ^0.2.0 Depends on serialport @ ^9.0.7 nodecg-io-slack Allows to connect to your slack. This enables you to e.g. send messages and list all channel. Visit https://api.slack.com/methods to see all methods See the sample implementation Depends on @slack/web-api @ ^6.1.0 Depends on nodecg-io-core @ ^0.2.0 nodecg-io-spotify Allows to connect to your personal Spotify account. This enables you to e.g. control music playback or get current song information. See the sample implementation Depends on @types/spotify-web-api-node @ ^5.0.1 Depends on express @ ^4.17.1 Depends on nodecg-io-core @ ^0.2.0 Depends on open @ ^8.0.2 Depends on spotify-web-api-node @ ^5.0.2 nodecg-io-streamdeck Allows to interface with the elgato streamdeck. See the sample implementation Depends on elgato-stream-deck @ ^4.0.1 Depends on nodecg-io-core @ ^0.2.0 nodecg-io-streamelements Allows to connect to streamelements to e.g. react to donations. See the sample implementation Depends on @types/socket.io-client @ ^1.4.35 Depends on nodecg-io-core @ ^0.2.0 Depends on socket.io-client @ ^2.3.1 nodecg-io-telegram Allows you to control a telegram bot. See the sample implementation Depends on @types/node-telegram-bot-api @ ^0.51.1 Depends on node-telegram-bot-api @ ^0.51.0 Depends on nodecg-io-core @ ^0.2.0 nodecg-io-template Template package. There's no sample implementation for this service yet. Depends on nodecg-io-core @ ^0.2.0 nodecg-io-tiane Connect to TIANE and make her for example a discord bot. https://github.com/FerdiKr/TIANE See the sample implementation Depends on nodecg-io-core @ ^0.2.0 Depends on ws @ ^7.4.4 nodecg-io-twitch-addons Support for the API's of BetterTTV and FrankerFaceZ See the sample implementation Depends on node-fetch @ ^2.6.1 Depends on nodecg-io-core @ ^0.2.0 Depends on nodecg-io-twitch-auth @ ^0.2.0 nodecg-io-twitch-api Allows talking to twitch APIs like helix. See the sample implementation Depends on nodecg-io-core @ ^0.2.0 Depends on nodecg-io-twitch-auth @ ^0.2.0 Depends on twitch @ ^4.5.0 nodecg-io-twitch-chat Allows to connect to the twitch chat with your account, send and receive messages and much more. It can be used to create Twitch-Bots. See the sample implementation Depends on nodecg-io-core @ ^0.2.0 Depends on nodecg-io-twitch-auth @ ^0.2.0 Depends on twitch-chat-client @ ^4.5.0 nodecg-io-twitch-pubsub Allows access to the Twitch PubSub API. See the sample implementation Depends on nodecg-io-core @ ^0.2.0 Depends on nodecg-io-twitch-auth @ ^0.2.0 Depends on twitch @ ^4.5.0 Depends on twitch-pubsub-client @ ^4.5.0 nodecg-io-twitter Allows to connect to twitter, send, retweet or like messages. See the sample implementation Depends on @types/twitter @ ^1.7.0 Depends on nodecg-io-core @ ^0.2.0 Depends on twitter @ ^1.7.1 nodecg-io-websocket-client Allows to connect to a external WebSocket server. See the sample implementation Depends on @types/ws @ ^7.4.0 Depends on nodecg-io-core @ ^0.2.0 Depends on ws @ ^7.4.4 nodecg-io-websocket-server Allows to create a custom WebSocket server. See the sample implementation Depends on @types/ws @ ^7.4.0 Depends on nodecg-io-core @ ^0.2.0 Depends on ws @ ^7.4.4 nodecg-io-xdotool Allows you to send commands to xdotool. See the sample implementation Depends on @rauschma/stringio @ ^1.4.0 Depends on node-fetch @ ^2.6.1 Depends on nodecg-io-core @ ^0.2.0 nodecg-io-youtube Allows to connect and interact to youtube See the sample implementation Depends on @types/gapi @ ^0.0.39 Depends on express @ ^4.17.1 Depends on googleapis @ ^67.1.1 Depends on nodecg-io-core @ ^0.2.0 Depends on open @ ^8.0.2","title":"Available services"},{"location":"services/#available-nodecg-io-services","text":"","title":"Available nodecg-io services"},{"location":"services/#nodecg-io-core","text":"The core of nodecg-io. Connects everything up. Depends on ajv @ ^7.2.1 Depends on crypto-js @ ^4.0.0 Depends on tslib @ ^2.1.0","title":"nodecg-io-core"},{"location":"services/#nodecg-io-ahk","text":"Allows you to send commands to AutoHotkey. See the sample implementation Depends on node-fetch @ ^2.6.1 Depends on nodecg-io-core @ ^0.2.0","title":"nodecg-io-ahk"},{"location":"services/#nodecg-io-android","text":"Allows to connect to an android device via adb. See the sample implementation Depends on @rauschma/stringio @ ^1.4.0 Depends on get-stream @ ^6.0.0 Depends on nodecg-io-core @ ^0.2.0","title":"nodecg-io-android"},{"location":"services/#nodecg-io-curseforge","text":"A service to communicate with the CurseForge API. See the sample implementation Depends on node-fetch @ ^2.6.1 Depends on nodecg-io-core @ ^0.2.0","title":"nodecg-io-curseforge"},{"location":"services/#nodecg-io-debug","text":"Debug helper service that helps to easily trigger your code for debugging purposes. See the sample implementation Depends on nodecg-io-core @ ^0.2.0 Depends on monaco-editor @ ^0.23.0","title":"nodecg-io-debug"},{"location":"services/#nodecg-io-discord","text":"Allows to connect to discord via a discord-bot. See the sample implementation Depends on discord.js @ ^12.5.1 Depends on nodecg-io-core @ ^0.2.0","title":"nodecg-io-discord"},{"location":"services/#nodecg-io-gsheets","text":"Allow to control Google Sheets. There's no sample implementation for this service yet. Depends on @types/gapi @ ^0.0.39 Depends on express @ ^4.17.1 Depends on googleapis @ ^67.1.1 Depends on nodecg-io-core @ ^0.2.0 Depends on open @ ^8.0.2","title":"nodecg-io-gsheets"},{"location":"services/#nodecg-io-intellij","text":"Allows to control JetBrains IDEs via nodecg-io See the sample implementation Depends on node-fetch @ ^2.6.1 Depends on nodecg-io-core @ ^0.2.0","title":"nodecg-io-intellij"},{"location":"services/#nodecg-io-irc","text":"Allow to connect to IRC Servers. See the sample implementation Depends on @types/irc @ ^0.5.0 Depends on irc @ ^0.5.2 Depends on nodecg-io-core @ ^0.2.0","title":"nodecg-io-irc"},{"location":"services/#nodecg-io-midi-input","text":"Connect to MIDI devices and control the volume of your voice or music with a fader. See the sample implementation Depends on easymidi @ ^2.0.1 Depends on nodecg-io-core @ ^0.2.0","title":"nodecg-io-midi-input"},{"location":"services/#nodecg-io-midi-output","text":"Connect to MIDI devices and control the volume of your voice or music with a fader. See the sample implementation Depends on easymidi @ ^2.0.1 Depends on nodecg-io-core @ ^0.2.0","title":"nodecg-io-midi-output"},{"location":"services/#nodecg-io-nanoleaf","text":"Allows to connect to a nanoleaf controller and trigger custom lighting effects. There's no sample implementation for this service yet. Depends on @types/node-fetch @ ^2.5.8 Depends on node-fetch @ ^2.6.1 Depends on nodecg-io-core @ ^0.2.0","title":"nodecg-io-nanoleaf"},{"location":"services/#nodecg-io-obs","text":"Allows to control your obs instance to e.g. switch scenes. See the sample implementation Depends on nodecg-io-core @ ^0.2.0 Depends on obs-websocket-js @ ^4.0.2","title":"nodecg-io-obs"},{"location":"services/#nodecg-io-philipshue","text":"Allows you to connect with your Philips Hue bridge. This allows you to control your lights etc. See the sample implementation Depends on is-ip @ ^3.1.0 Depends on node-hue-api @ ^4.0.9 Depends on nodecg-io-core @ ^0.2.0","title":"nodecg-io-philipshue"},{"location":"services/#nodecg-io-rcon","text":"Allows you to send commands to a minecraft server via RCON. See the sample implementation Depends on nodecg-io-core @ ^0.2.0 Depends on rcon-client @ ^4.2.3","title":"nodecg-io-rcon"},{"location":"services/#nodecg-io-reddit","text":"Provides an interface to the Reddit-API. See the sample implementation Depends on nodecg-io-core @ ^0.2.0 Depends on reddit-ts @ noeppi-noeppi/npm-reddit-ts#build","title":"nodecg-io-reddit"},{"location":"services/#nodecg-io-sacn-receiver","text":"Allows you to receive data via sACN from e.g professional lighting consoles. See the sample implementation Depends on nodecg-io-core @ ^0.2.0 Depends on sacn @ ^3.2.1","title":"nodecg-io-sacn-receiver"},{"location":"services/#nodecg-io-sacn-sender","text":"Allows you to send data via sACN to e.g professional lights. See the sample implementation Depends on nodecg-io-core @ ^0.2.0 Depends on sacn @ ^3.2.1","title":"nodecg-io-sacn-sender"},{"location":"services/#nodecg-io-serial","text":"Exposes serial deivces to nodecg-io See the sample implementation Depends on @serialport/parser-readline @ ^9.0.7 Depends on @types/serialport @ ^8.0.1 Depends on nodecg-io-core @ ^0.2.0 Depends on serialport @ ^9.0.7","title":"nodecg-io-serial"},{"location":"services/#nodecg-io-slack","text":"Allows to connect to your slack. This enables you to e.g. send messages and list all channel. Visit https://api.slack.com/methods to see all methods See the sample implementation Depends on @slack/web-api @ ^6.1.0 Depends on nodecg-io-core @ ^0.2.0","title":"nodecg-io-slack"},{"location":"services/#nodecg-io-spotify","text":"Allows to connect to your personal Spotify account. This enables you to e.g. control music playback or get current song information. See the sample implementation Depends on @types/spotify-web-api-node @ ^5.0.1 Depends on express @ ^4.17.1 Depends on nodecg-io-core @ ^0.2.0 Depends on open @ ^8.0.2 Depends on spotify-web-api-node @ ^5.0.2","title":"nodecg-io-spotify"},{"location":"services/#nodecg-io-streamdeck","text":"Allows to interface with the elgato streamdeck. See the sample implementation Depends on elgato-stream-deck @ ^4.0.1 Depends on nodecg-io-core @ ^0.2.0","title":"nodecg-io-streamdeck"},{"location":"services/#nodecg-io-streamelements","text":"Allows to connect to streamelements to e.g. react to donations. See the sample implementation Depends on @types/socket.io-client @ ^1.4.35 Depends on nodecg-io-core @ ^0.2.0 Depends on socket.io-client @ ^2.3.1","title":"nodecg-io-streamelements"},{"location":"services/#nodecg-io-telegram","text":"Allows you to control a telegram bot. See the sample implementation Depends on @types/node-telegram-bot-api @ ^0.51.1 Depends on node-telegram-bot-api @ ^0.51.0 Depends on nodecg-io-core @ ^0.2.0","title":"nodecg-io-telegram"},{"location":"services/#nodecg-io-template","text":"Template package. There's no sample implementation for this service yet. Depends on nodecg-io-core @ ^0.2.0","title":"nodecg-io-template"},{"location":"services/#nodecg-io-tiane","text":"Connect to TIANE and make her for example a discord bot. https://github.com/FerdiKr/TIANE See the sample implementation Depends on nodecg-io-core @ ^0.2.0 Depends on ws @ ^7.4.4","title":"nodecg-io-tiane"},{"location":"services/#nodecg-io-twitch-addons","text":"Support for the API's of BetterTTV and FrankerFaceZ See the sample implementation Depends on node-fetch @ ^2.6.1 Depends on nodecg-io-core @ ^0.2.0 Depends on nodecg-io-twitch-auth @ ^0.2.0","title":"nodecg-io-twitch-addons"},{"location":"services/#nodecg-io-twitch-api","text":"Allows talking to twitch APIs like helix. See the sample implementation Depends on nodecg-io-core @ ^0.2.0 Depends on nodecg-io-twitch-auth @ ^0.2.0 Depends on twitch @ ^4.5.0","title":"nodecg-io-twitch-api"},{"location":"services/#nodecg-io-twitch-chat","text":"Allows to connect to the twitch chat with your account, send and receive messages and much more. It can be used to create Twitch-Bots. See the sample implementation Depends on nodecg-io-core @ ^0.2.0 Depends on nodecg-io-twitch-auth @ ^0.2.0 Depends on twitch-chat-client @ ^4.5.0","title":"nodecg-io-twitch-chat"},{"location":"services/#nodecg-io-twitch-pubsub","text":"Allows access to the Twitch PubSub API. See the sample implementation Depends on nodecg-io-core @ ^0.2.0 Depends on nodecg-io-twitch-auth @ ^0.2.0 Depends on twitch @ ^4.5.0 Depends on twitch-pubsub-client @ ^4.5.0","title":"nodecg-io-twitch-pubsub"},{"location":"services/#nodecg-io-twitter","text":"Allows to connect to twitter, send, retweet or like messages. See the sample implementation Depends on @types/twitter @ ^1.7.0 Depends on nodecg-io-core @ ^0.2.0 Depends on twitter @ ^1.7.1","title":"nodecg-io-twitter"},{"location":"services/#nodecg-io-websocket-client","text":"Allows to connect to a external WebSocket server. See the sample implementation Depends on @types/ws @ ^7.4.0 Depends on nodecg-io-core @ ^0.2.0 Depends on ws @ ^7.4.4","title":"nodecg-io-websocket-client"},{"location":"services/#nodecg-io-websocket-server","text":"Allows to create a custom WebSocket server. See the sample implementation Depends on @types/ws @ ^7.4.0 Depends on nodecg-io-core @ ^0.2.0 Depends on ws @ ^7.4.4","title":"nodecg-io-websocket-server"},{"location":"services/#nodecg-io-xdotool","text":"Allows you to send commands to xdotool. See the sample implementation Depends on @rauschma/stringio @ ^1.4.0 Depends on node-fetch @ ^2.6.1 Depends on nodecg-io-core @ ^0.2.0","title":"nodecg-io-xdotool"},{"location":"services/#nodecg-io-youtube","text":"Allows to connect and interact to youtube See the sample implementation Depends on @types/gapi @ ^0.0.39 Depends on express @ ^4.17.1 Depends on googleapis @ ^67.1.1 Depends on nodecg-io-core @ ^0.2.0 Depends on open @ ^8.0.2","title":"nodecg-io-youtube"},{"location":"contribute/contribute/","text":"How to contribute There are many ways to contribute to nodecg-io: logging bugs, submitting pull requests, reporting issues, and creating suggestions. First you'll need a installation of nodecg-io. Please refer to the installation guide but instead of using our repository you might want to fork the nodecg-io repository to your GitHub account and clone your fork. To make changes to the documentation you also need to clone the docs repo: git clone https://github.com/codeoverflow-org/nodecg-io-docs.git Build VS Code In Visual Studio Code you can start the build task with Ctrl + Shift + B ( CMD + Shift + B on macOS). The incremental builder will do an initial full build. The watch builder will watch for file changes and compile those changes incrementally, giving you a fast, iterative coding experience. It will even stay running in the background if you close VS Code. You can resume it by starting the build task with Ctrl + Shift + B ( CMD + Shift + B ) again. ou can kill the build task by pressing Ctrl + D in the task terminal ( CMD + D on macOS. Errors and warnings will be shown in the status bar at the bottom left of the editor. You can view the error list using View | Errors and Warnings or pressing Ctrl + P and then ! ( CMD + P and ! on macOS) Terminal You can also use you terminal to build nodecg-io: cd path/to/nodecg-io npm run build To do a full rebuild instead of just a incremental build you can use npm run rebuild . The watch builder can be activated here too: cd path/to/nodecg-io npm run watch Note: Watching all packages requires a lot of RAM. Instead you can watch just the packages you are actively working on e.g. npm run watch -- --scope nodecg-io-twitch-chat --scope twitch-chat . This will just spawn a watch process for the twitch-chat sample and service and require way less memory. Run To test the changes you simply need to start/restart nodecg. Adding dependencies to packages This project uses lerna to manage our monorepo and most importantly link all our packages together. Because of linking you should not use npm install xyz --save to add dependencies because npm can't get the development version of internal packages like nodecg-io-core . Doing so will result in an error and break the link. Instead you should edit the package.json directly using a text editor and the run npm run bootstrap in the repository root. Open a Pull Request Once you have implemented your feature or fixed a bug push it to your fork and start a Pull Request. Merge Upstream Changes Occasionally you will want to merge changes in the upstream repository (the official code repo) with your fork. cd path/to/nodecg-io git checkout master git pull https://github.com/codeoverflow-org/nodecg-io master Manage any merge conflicts, commit them, and then push them to your fork. You may also occasionally need to merge upstream master in a pull request. To do that make the above to update your local master and the merge your local master into your PR branch. Where to Contribute After cloning and building the repo, check out the issues list . Issues labeled help wanted are good issues to submit a PR for. Issues labeled good first issue are great candidates to pick up if you are in the code for the first time. If you are contributing significant changes, please discuss with the assignee of the issue first before starting to work on the issue. Suggestions We're also interested in your feedback. You can submit a suggestion or feature request through the issue tracker. To make this process more effective, we're asking that these include more information to help define them more clearly. Discussion Etiquette In order to keep the conversation clear and transparent, please limit discussion to English and keep things on topic with the issue. Be considerate to others and try to be courteous and professional at all times.","title":"Basics"},{"location":"contribute/contribute/#how-to-contribute","text":"There are many ways to contribute to nodecg-io: logging bugs, submitting pull requests, reporting issues, and creating suggestions. First you'll need a installation of nodecg-io. Please refer to the installation guide but instead of using our repository you might want to fork the nodecg-io repository to your GitHub account and clone your fork. To make changes to the documentation you also need to clone the docs repo: git clone https://github.com/codeoverflow-org/nodecg-io-docs.git","title":"How to contribute"},{"location":"contribute/contribute/#build","text":"","title":"Build"},{"location":"contribute/contribute/#vs-code","text":"In Visual Studio Code you can start the build task with Ctrl + Shift + B ( CMD + Shift + B on macOS). The incremental builder will do an initial full build. The watch builder will watch for file changes and compile those changes incrementally, giving you a fast, iterative coding experience. It will even stay running in the background if you close VS Code. You can resume it by starting the build task with Ctrl + Shift + B ( CMD + Shift + B ) again. ou can kill the build task by pressing Ctrl + D in the task terminal ( CMD + D on macOS. Errors and warnings will be shown in the status bar at the bottom left of the editor. You can view the error list using View | Errors and Warnings or pressing Ctrl + P and then ! ( CMD + P and ! on macOS)","title":"VS Code"},{"location":"contribute/contribute/#terminal","text":"You can also use you terminal to build nodecg-io: cd path/to/nodecg-io npm run build To do a full rebuild instead of just a incremental build you can use npm run rebuild . The watch builder can be activated here too: cd path/to/nodecg-io npm run watch Note: Watching all packages requires a lot of RAM. Instead you can watch just the packages you are actively working on e.g. npm run watch -- --scope nodecg-io-twitch-chat --scope twitch-chat . This will just spawn a watch process for the twitch-chat sample and service and require way less memory.","title":"Terminal"},{"location":"contribute/contribute/#run","text":"To test the changes you simply need to start/restart nodecg.","title":"Run"},{"location":"contribute/contribute/#adding-dependencies-to-packages","text":"This project uses lerna to manage our monorepo and most importantly link all our packages together. Because of linking you should not use npm install xyz --save to add dependencies because npm can't get the development version of internal packages like nodecg-io-core . Doing so will result in an error and break the link. Instead you should edit the package.json directly using a text editor and the run npm run bootstrap in the repository root.","title":"Adding dependencies to packages"},{"location":"contribute/contribute/#open-a-pull-request","text":"Once you have implemented your feature or fixed a bug push it to your fork and start a Pull Request.","title":"Open a Pull Request"},{"location":"contribute/contribute/#merge-upstream-changes","text":"Occasionally you will want to merge changes in the upstream repository (the official code repo) with your fork. cd path/to/nodecg-io git checkout master git pull https://github.com/codeoverflow-org/nodecg-io master Manage any merge conflicts, commit them, and then push them to your fork. You may also occasionally need to merge upstream master in a pull request. To do that make the above to update your local master and the merge your local master into your PR branch.","title":"Merge Upstream Changes"},{"location":"contribute/contribute/#where-to-contribute","text":"After cloning and building the repo, check out the issues list . Issues labeled help wanted are good issues to submit a PR for. Issues labeled good first issue are great candidates to pick up if you are in the code for the first time. If you are contributing significant changes, please discuss with the assignee of the issue first before starting to work on the issue.","title":"Where to Contribute"},{"location":"contribute/contribute/#suggestions","text":"We're also interested in your feedback. You can submit a suggestion or feature request through the issue tracker. To make this process more effective, we're asking that these include more information to help define them more clearly.","title":"Suggestions"},{"location":"contribute/contribute/#discussion-etiquette","text":"In order to keep the conversation clear and transparent, please limit discussion to English and keep things on topic with the issue. Be considerate to others and try to be courteous and professional at all times.","title":"Discussion Etiquette"},{"location":"contribute/contributors/","text":"a.contributorlink:hover { text-decoration-style: solid; text-decoration-line: underline; text-decoration-color: white; } fetch('https://api.github.com/repos/codeoverflow-org/nodecg-io/contributors').then(response => { response.json().then(data => { let idx = 1 data.forEach(entry => { const div = document.createElement('div') div.style = `grid-column: 1; grid-row: ${idx}; display: inline-block; padding-bottom: 10px` if ('avatar_url' in entry) { div.innerHTML = ` <img src=\"${entry.avatar_url}\" width=\"64\" height=\"64\" style=\"float: left; margin-top: 0\"> <div style=\"float:left; margin-top: 0\"> <span style=\"font-size: 16pt; font-weight: bold; margin-left: 1em; color: white;\"> <a style=\"color: white;\" class=\"contributorlink\" href=\"${entry.html_url}\">${entry.login}</a> </span><br> <span style=\"font-size: 12pt; margin-left: 1em; color: white;\"> <a style=\"color: white;\" class=\"contributorlink\" href=\"https://github.com/codeoverflow-org/nodecg-io/commits?author=${entry.login}\">${entry.contributions} contributions</a> </span> </div> ` } else { div.innerHTML = ` <span style=\"font-size: 16pt; font-weight: bold; margin-left: 1em; color: white;\">${entry.login}</span><br> <span style=\"font-size: 12pt; margin-left: 1em; color: white;\">${entry.contributions} contributions</span> ` } document.getElementById('contributorview').appendChild(div) idx += 1 }) }) }) Top 30 nodecg-io contributors","title":"Contributors"},{"location":"contribute/contributors/#top-30-nodecg-io-contributors","text":"","title":"Top 30 nodecg-io contributors"},{"location":"contribute/create_sample/","text":"Create a sample bundle A sample should have the same name as the service but it may include a short description in the name after the service name aswell. E.g. twitch-chat or obs-scenelist . Create a folder in samples named after the sample and add a package.json and a tsconfig.json : { \"name\" : \"<the sample name>\" , \"private\" : true , \"version\" : \"0.1.0\" , \"nodecg\" : { \"compatibleRange\" : \"^1.1.1\" , \"bundleDependencies\" : { \"nodecg-io-<the service name>\" : \"^0.1.0\" } }, \"scripts\" : { \"build\" : \"tsc -b\" , \"watch\" : \"tsc -b -w\" , \"clean\" : \"tsc -b --clean\" }, \"license\" : \"MIT\" , \"dependencies\" : { \"nodecg-io-<the service name>\" : \"^0.1.0\" , \"nodecg-io-core\" : \"^0.1.0\" , \"@types/node\" : \"^14.14.13\" , \"nodecg\" : \"^1.7.4\" , \"typescript\" : \"^4.1.3\" } } { \"extends\" : \"../../tsconfig.common.json\" } Now you can create file called extension/index.ts . Here's a template. Make sure you replace all the comments with your own code. import { NodeCG } from \"nodecg/types/server\" ; import { requireService } from \"nodecg-io-core\" ; import { TheServicesExportedClient } from \"nodecg-io-<the services name>\" ; module .exports = function ( nodecg : NodeCG ) { nodecg . log . info ( \"Sample bundle for <the-service-name> started\" ); const service = requireService < TheServicesExportedClient > ( nodecg , \"<the-service-name>\" ); service ? . onAvailable (( client ) => { nodecg . log . info ( \"Client has been updated.\" ); // TODO do something with the client to demonstrate the functionality. }); service ? . onUnavailable (() => nodecg . log . info ( \"Client has been unset.\" )); }; Next steps You could add documentation for the sample bundle.","title":"Create a sample bundle"},{"location":"contribute/create_sample/#create-a-sample-bundle","text":"A sample should have the same name as the service but it may include a short description in the name after the service name aswell. E.g. twitch-chat or obs-scenelist . Create a folder in samples named after the sample and add a package.json and a tsconfig.json : { \"name\" : \"<the sample name>\" , \"private\" : true , \"version\" : \"0.1.0\" , \"nodecg\" : { \"compatibleRange\" : \"^1.1.1\" , \"bundleDependencies\" : { \"nodecg-io-<the service name>\" : \"^0.1.0\" } }, \"scripts\" : { \"build\" : \"tsc -b\" , \"watch\" : \"tsc -b -w\" , \"clean\" : \"tsc -b --clean\" }, \"license\" : \"MIT\" , \"dependencies\" : { \"nodecg-io-<the service name>\" : \"^0.1.0\" , \"nodecg-io-core\" : \"^0.1.0\" , \"@types/node\" : \"^14.14.13\" , \"nodecg\" : \"^1.7.4\" , \"typescript\" : \"^4.1.3\" } } { \"extends\" : \"../../tsconfig.common.json\" } Now you can create file called extension/index.ts . Here's a template. Make sure you replace all the comments with your own code. import { NodeCG } from \"nodecg/types/server\" ; import { requireService } from \"nodecg-io-core\" ; import { TheServicesExportedClient } from \"nodecg-io-<the services name>\" ; module .exports = function ( nodecg : NodeCG ) { nodecg . log . info ( \"Sample bundle for <the-service-name> started\" ); const service = requireService < TheServicesExportedClient > ( nodecg , \"<the-service-name>\" ); service ? . onAvailable (( client ) => { nodecg . log . info ( \"Client has been updated.\" ); // TODO do something with the client to demonstrate the functionality. }); service ? . onUnavailable (() => nodecg . log . info ( \"Client has been unset.\" )); };","title":"Create a sample bundle"},{"location":"contribute/create_sample/#next-steps","text":"You could add documentation for the sample bundle.","title":"Next steps"},{"location":"contribute/create_service/","text":"Create a service integration This guide helps you to create a service integration such as twitch-chat or discord Find a javascript library Go to npmjs.com and look whether there's already a package that wraps around the API of your service. If there's no such package you need to create one yourself. This process is not described here. Create a package From here you will have to replace: YourServiceName to your service's name in PascalCase . yourServiceName to your service's name in carmelCase . your-service-name to your service's name with only lowercase and hyphens ( - ) for example: ws-server. Now you need to create a package. You should call it nodecg-io-your-service-name . First create a directory with that name put file called package.json into it. Put the following into it: { \"name\" : \"nodecg-io-<your-service-name>\" , \"version\" : \"0.1.0\" , \"description\" : \"<Short description what is possible with your service.>\" , \"homepage\" : \"https://nodecg.io/samples/<your-service-name>\" , \"author\" : { \"name\" : \"<Your name>\" , \"url\" : \"<Your github profile url>\" }, \"repository\" : { \"type\" : \"git\" , \"url\" : \"https://github.com/codeoverflow-org/nodecg-io.git\" , \"directory\" : \"nodecg-io-<your-service-name>\" }, \"main\" : \"extension\" \"scripts\" : { \"build\" : \"tsc -b\" , \"watch\" : \"tsc -b -w\" , \"clean\" : \"tsc -b --clean\" }, \"keywords\" : [ \"nodecg-io\" , \"nodecg-bundle\" ], \"nodecg\" : { \"compatibleRange\" : \"^1.1.1\" , \"bundleDependencies\" : { \"nodecg-io-core\" : \"^0.1.0\" } }, \"license\" : \"MIT\" , \"devDependencies\" : { \"@types/node\" : \"^14.14.13\" , \"nodecg\" : \"^1.7.4\" , \"typescript\" : \"^4.1.3\" }, \"dependencies\" : { \"nodecg-io-core\" : \"^0.1.0\" , \"<the package you found in step 1>\" : \"<the packages version you want to use>\" } } Next you need to put a file called tsconfig.json next to your package.json . The tsconfig.json should look like this: { \"extends\" : \"../tsconfig.common.json\" } Now run npm install and npm run bootstrap in the repository root. Create a configuration schema Next create a file called your-service-name-schame.json . This is a json schema file that indicates how the configuration for your service should be structured. If you need help here take a look at this online resource and the schema-files of the other service implementations. Create the service Create a file called index.ts in a folder called extension inside your services directory. You can then paste the following code and fill in your code instead of the comments. // TODO: Rename all occurences of \"YourServiceName\" in PascalCase // TODO: Rename all occurences of \"yourServiceName\" in carmelCase // TODO: Rename all occurences of \"your-service-name\" with only lowercase and hyphens ( - ) import { NodeCG } from \"nodecg/types/server\" ; import { Result , emptySuccess , success , ServiceBundle , ServiceClient } from \"nodecg-io-core\" ; // TODO: Replace the \"fake\" service class with that found on npm etc. import { ServiceClass } from \"./\" ; interface YourServiceNameServiceConfig { // TODO Fill in the values from your json schema here. The json // schema will load into an instance of this. } // ServiceClient ensures that you will provide a `getNativeClient` function that should give // access to the underlying client from the library that you are using. // TODO: if you want to provide simplifications for the service then make this // type-alias a separate class in a separate file and directly implement those simplifications // there. // TODO: Replace the `ServiceClass` with the class of the package from step 1 export type YourServiceNameServiceClient = ServiceClient < ServiceClass > ; module .exports = ( nodecg : NodeCG ) => { new YourServiceNameService ( nodecg , \"your-service-name\" , __dirname , \"../your-service-name-schema.json\" ). register (); }; class YourServiceNameService extends ServiceBundle < YourServiceNameServiceConfig , YourServiceNameServiceClient > { async validateConfig ( config : YourServiceNameServiceConfig ) : Promise < Result < void >> { // TODO You can validate your config here. If this gets called, the schema is correct. // You should for example check whether oauth keys are valid and servers are online here // If everything is good return 'emptySuccess()' // If an error occurs return 'error(<The error message>)' } async createClient ( config : YourServiceNameServiceConfig ) : Promise < Result < YourServiceNameServiceClient >> { // TODO Here you should return a <Your service name>ServiceClient that is exposed to bundles. // If everything is good return 'success({ // getNativeClient() { // return <The raw client from the package from step 1> // } // })' // Or create a instance of your class if you have any simplifications and return that. // If an error occurs return 'error(<The error message>)' } stopClient ( client : YourServiceNameServiceClient ) : void { // Here you shuld make sure you disconnect everything here (if possible). } } Now run npm run build in the repository root, start NodeCG and test your service out. Next steps You could create a sample bundle for your brand-new service. If you don't do so, make sure you add a placeholder file called <the services name>.md in docs/samples in your fork of the documentation. The file should look like this: <!-- Marker for build.py that there's no sample bundle. Remove this if you created one --> ## Using the <the services name> sample bundle No sample bundle for service `<the services name>` . [ You can help us and create one! ]( https://github.com/codeoverflow-org/nodecg-io/blob/master/docs/docs/contribute.md ) Do not remove the marker in the first line until the bundle is implemented and don't forget to add this file to mkdocs.yml .","title":"Create a Service"},{"location":"contribute/create_service/#create-a-service-integration","text":"This guide helps you to create a service integration such as twitch-chat or discord","title":"Create a service integration"},{"location":"contribute/create_service/#find-a-javascript-library","text":"Go to npmjs.com and look whether there's already a package that wraps around the API of your service. If there's no such package you need to create one yourself. This process is not described here.","title":"Find a javascript library"},{"location":"contribute/create_service/#create-a-package","text":"From here you will have to replace: YourServiceName to your service's name in PascalCase . yourServiceName to your service's name in carmelCase . your-service-name to your service's name with only lowercase and hyphens ( - ) for example: ws-server. Now you need to create a package. You should call it nodecg-io-your-service-name . First create a directory with that name put file called package.json into it. Put the following into it: { \"name\" : \"nodecg-io-<your-service-name>\" , \"version\" : \"0.1.0\" , \"description\" : \"<Short description what is possible with your service.>\" , \"homepage\" : \"https://nodecg.io/samples/<your-service-name>\" , \"author\" : { \"name\" : \"<Your name>\" , \"url\" : \"<Your github profile url>\" }, \"repository\" : { \"type\" : \"git\" , \"url\" : \"https://github.com/codeoverflow-org/nodecg-io.git\" , \"directory\" : \"nodecg-io-<your-service-name>\" }, \"main\" : \"extension\" \"scripts\" : { \"build\" : \"tsc -b\" , \"watch\" : \"tsc -b -w\" , \"clean\" : \"tsc -b --clean\" }, \"keywords\" : [ \"nodecg-io\" , \"nodecg-bundle\" ], \"nodecg\" : { \"compatibleRange\" : \"^1.1.1\" , \"bundleDependencies\" : { \"nodecg-io-core\" : \"^0.1.0\" } }, \"license\" : \"MIT\" , \"devDependencies\" : { \"@types/node\" : \"^14.14.13\" , \"nodecg\" : \"^1.7.4\" , \"typescript\" : \"^4.1.3\" }, \"dependencies\" : { \"nodecg-io-core\" : \"^0.1.0\" , \"<the package you found in step 1>\" : \"<the packages version you want to use>\" } } Next you need to put a file called tsconfig.json next to your package.json . The tsconfig.json should look like this: { \"extends\" : \"../tsconfig.common.json\" } Now run npm install and npm run bootstrap in the repository root.","title":"Create a package"},{"location":"contribute/create_service/#create-a-configuration-schema","text":"Next create a file called your-service-name-schame.json . This is a json schema file that indicates how the configuration for your service should be structured. If you need help here take a look at this online resource and the schema-files of the other service implementations.","title":"Create a configuration schema"},{"location":"contribute/create_service/#create-the-service","text":"Create a file called index.ts in a folder called extension inside your services directory. You can then paste the following code and fill in your code instead of the comments. // TODO: Rename all occurences of \"YourServiceName\" in PascalCase // TODO: Rename all occurences of \"yourServiceName\" in carmelCase // TODO: Rename all occurences of \"your-service-name\" with only lowercase and hyphens ( - ) import { NodeCG } from \"nodecg/types/server\" ; import { Result , emptySuccess , success , ServiceBundle , ServiceClient } from \"nodecg-io-core\" ; // TODO: Replace the \"fake\" service class with that found on npm etc. import { ServiceClass } from \"./\" ; interface YourServiceNameServiceConfig { // TODO Fill in the values from your json schema here. The json // schema will load into an instance of this. } // ServiceClient ensures that you will provide a `getNativeClient` function that should give // access to the underlying client from the library that you are using. // TODO: if you want to provide simplifications for the service then make this // type-alias a separate class in a separate file and directly implement those simplifications // there. // TODO: Replace the `ServiceClass` with the class of the package from step 1 export type YourServiceNameServiceClient = ServiceClient < ServiceClass > ; module .exports = ( nodecg : NodeCG ) => { new YourServiceNameService ( nodecg , \"your-service-name\" , __dirname , \"../your-service-name-schema.json\" ). register (); }; class YourServiceNameService extends ServiceBundle < YourServiceNameServiceConfig , YourServiceNameServiceClient > { async validateConfig ( config : YourServiceNameServiceConfig ) : Promise < Result < void >> { // TODO You can validate your config here. If this gets called, the schema is correct. // You should for example check whether oauth keys are valid and servers are online here // If everything is good return 'emptySuccess()' // If an error occurs return 'error(<The error message>)' } async createClient ( config : YourServiceNameServiceConfig ) : Promise < Result < YourServiceNameServiceClient >> { // TODO Here you should return a <Your service name>ServiceClient that is exposed to bundles. // If everything is good return 'success({ // getNativeClient() { // return <The raw client from the package from step 1> // } // })' // Or create a instance of your class if you have any simplifications and return that. // If an error occurs return 'error(<The error message>)' } stopClient ( client : YourServiceNameServiceClient ) : void { // Here you shuld make sure you disconnect everything here (if possible). } } Now run npm run build in the repository root, start NodeCG and test your service out.","title":"Create the service"},{"location":"contribute/create_service/#next-steps","text":"You could create a sample bundle for your brand-new service. If you don't do so, make sure you add a placeholder file called <the services name>.md in docs/samples in your fork of the documentation. The file should look like this: <!-- Marker for build.py that there's no sample bundle. Remove this if you created one --> ## Using the <the services name> sample bundle No sample bundle for service `<the services name>` . [ You can help us and create one! ]( https://github.com/codeoverflow-org/nodecg-io/blob/master/docs/docs/contribute.md ) Do not remove the marker in the first line until the bundle is implemented and don't forget to add this file to mkdocs.yml .","title":"Next steps"},{"location":"contribute/sample_documentation/","text":"Add your sample to the docs To document a sample bundle take a look at the name of the service the sample bundle is for. If it's for example nodecg-io-example the documentation must go into docs/samples/example.md in the docs repository. There you should include a step-by-step manual how to configure the service and get the bundle running. Don't forget to add the newly created MarkDown file to mkdocs.yml . When you create your documentation pull request, please include the id of your PR in the main repository in the description so the documentation is not merged before the actual code. You should make this very detailed so everyone gets it to work because a super-good implementation is worth nothing if there's nobody who can use it. Take a look at the twitch sample bundle .","title":"Document a sample"},{"location":"contribute/sample_documentation/#add-your-sample-to-the-docs","text":"To document a sample bundle take a look at the name of the service the sample bundle is for. If it's for example nodecg-io-example the documentation must go into docs/samples/example.md in the docs repository. There you should include a step-by-step manual how to configure the service and get the bundle running. Don't forget to add the newly created MarkDown file to mkdocs.yml . When you create your documentation pull request, please include the id of your PR in the main repository in the description so the documentation is not merged before the actual code. You should make this very detailed so everyone gets it to work because a super-good implementation is worth nothing if there's nobody who can use it. Take a look at the twitch sample bundle .","title":"Add your sample to the docs"},{"location":"getting_started/create_bundle/","text":"Create your first bundle To actually use nodecg-io you need to create a bundle. Here's a step-by-step guide to create one. Dependencies Think of what services your bundle needs. Take a look at the service list if to see what services are available. If you need a service that is not yet available consider creating it . Create a package Your package is a standard NodeCG bundle. See their website for more info. The bundle should be dependent on nodecg-io-core and all services it needs. Then you define module.exports as a function that takes a NodeCG instance. In that function you initialise your bundle. Adding availability handlers Here's an example for twitch: const twitch = requireService < TwitchServiceClient > ( nodecg , \"twitch\" ); twitch ? . onAvailable (( client ) => { // Do sth when twitch is available }); twitch ? . onUnavailable (() => { // Do sth when twitch is not / no longer available }); If you need multiple services you can save them in global variables and access them using the service.getClient() function which returns an optional of the client. If it isn't currently set it will be undefined . Test it Start NodeCG and provide your bundle with all required services. Share it! If you share your work others might get happy with it. And we made nodecg-io for you and the nodecg people made nodecg for you. Many people spent much time for you to create cool content that easy and if you shared your work others could create good content more easily as well.","title":"Your first bundle"},{"location":"getting_started/create_bundle/#create-your-first-bundle","text":"To actually use nodecg-io you need to create a bundle. Here's a step-by-step guide to create one.","title":"Create your first bundle"},{"location":"getting_started/create_bundle/#dependencies","text":"Think of what services your bundle needs. Take a look at the service list if to see what services are available. If you need a service that is not yet available consider creating it .","title":"Dependencies"},{"location":"getting_started/create_bundle/#create-a-package","text":"Your package is a standard NodeCG bundle. See their website for more info. The bundle should be dependent on nodecg-io-core and all services it needs. Then you define module.exports as a function that takes a NodeCG instance. In that function you initialise your bundle.","title":"Create a package"},{"location":"getting_started/create_bundle/#adding-availability-handlers","text":"Here's an example for twitch: const twitch = requireService < TwitchServiceClient > ( nodecg , \"twitch\" ); twitch ? . onAvailable (( client ) => { // Do sth when twitch is available }); twitch ? . onUnavailable (() => { // Do sth when twitch is not / no longer available }); If you need multiple services you can save them in global variables and access them using the service.getClient() function which returns an optional of the client. If it isn't currently set it will be undefined .","title":"Adding availability handlers"},{"location":"getting_started/create_bundle/#test-it","text":"Start NodeCG and provide your bundle with all required services.","title":"Test it"},{"location":"getting_started/create_bundle/#share-it","text":"If you share your work others might get happy with it. And we made nodecg-io for you and the nodecg people made nodecg for you. Many people spent much time for you to create cool content that easy and if you shared your work others could create good content more easily as well.","title":"Share it!"},{"location":"getting_started/install/","text":"Installation Prerequisites In order to download necessary tools, clone the repository, and install dependencies via npm you need network access. You'll need the following tools: Git Node.JS v12.0.0 or newer Npm 7.0.0 or newer NodeCG 1.4.0 or newer You'll also need operating system dependant tools for native modules like Streamdeck and Midi: Windows For Windows you'll need the Visual Studio Build Tools, if you have Visual Studio installed you should already have them. If you don't have Visual Studio just install the Visual Studio Build Tools by running the following command as an Administrator : npm install -g windows-build-tools Linux For Linux you'll need a C++ compiler and some other packages. On Ubuntu/Debian based operating systems run the following command: sudo apt install build-essential libusb-1.0-0-dev libasound2-dev libudev-dev For other linux distros you'll need the corresponding packages, just search on the internet how the packages are named for your specific distro. MacOS For MacOS you'll need the Xcode command line tools. To install them run the following command: xcode-select --install Clone this repository git clone https://github.com/codeoverflow-org/nodecg-io.git Note: You should clone nodecg-io to somewhere outside of your nodecg bundles/ directory as this repo contains many bundles in subdirectories and nodecg doesn't support nesting of the bundles in other directories. You can clone it to any other path that you wish. Install all of the dependencies using npm cd path/to/nodecg-io npm install npm run bootstrap Build nodecg-io: cd path/to/nodecg-io npm run build Add nodecg-io directory to the nodecg config Modify the nodecg configuration in path/to/nodecg/cfg/nodecg.json , here is an example config: { \"bundles\" : { \"paths\" : [ \"path/to/nodecg-io\" , \"path/to/nodecg-io/samples\" ] } } Note 1: This path should point to the root of this repository, not to a bundle inside this repo. Note 2: The second path to the samples is only required if you want to use a sample plugin. Note 3: If nodecg doesn't load nodecg-io for some reason you might want to use an absolute path here. Start nodecg Now you can use nodecg-io in your own bundle. You can find example code in ./samples/ .","title":"Installation"},{"location":"getting_started/install/#installation","text":"","title":"Installation"},{"location":"getting_started/install/#prerequisites","text":"In order to download necessary tools, clone the repository, and install dependencies via npm you need network access. You'll need the following tools: Git Node.JS v12.0.0 or newer Npm 7.0.0 or newer NodeCG 1.4.0 or newer You'll also need operating system dependant tools for native modules like Streamdeck and Midi:","title":"Prerequisites"},{"location":"getting_started/install/#windows","text":"For Windows you'll need the Visual Studio Build Tools, if you have Visual Studio installed you should already have them. If you don't have Visual Studio just install the Visual Studio Build Tools by running the following command as an Administrator : npm install -g windows-build-tools","title":"Windows"},{"location":"getting_started/install/#linux","text":"For Linux you'll need a C++ compiler and some other packages. On Ubuntu/Debian based operating systems run the following command: sudo apt install build-essential libusb-1.0-0-dev libasound2-dev libudev-dev For other linux distros you'll need the corresponding packages, just search on the internet how the packages are named for your specific distro.","title":"Linux"},{"location":"getting_started/install/#macos","text":"For MacOS you'll need the Xcode command line tools. To install them run the following command: xcode-select --install","title":"MacOS"},{"location":"getting_started/install/#clone-this-repository","text":"git clone https://github.com/codeoverflow-org/nodecg-io.git Note: You should clone nodecg-io to somewhere outside of your nodecg bundles/ directory as this repo contains many bundles in subdirectories and nodecg doesn't support nesting of the bundles in other directories. You can clone it to any other path that you wish.","title":"Clone this repository"},{"location":"getting_started/install/#install-all-of-the-dependencies-using-npm","text":"cd path/to/nodecg-io npm install npm run bootstrap","title":"Install all of the dependencies using npm"},{"location":"getting_started/install/#build-nodecg-io","text":"cd path/to/nodecg-io npm run build","title":"Build nodecg-io:"},{"location":"getting_started/install/#add-nodecg-io-directory-to-the-nodecg-config","text":"Modify the nodecg configuration in path/to/nodecg/cfg/nodecg.json , here is an example config: { \"bundles\" : { \"paths\" : [ \"path/to/nodecg-io\" , \"path/to/nodecg-io/samples\" ] } } Note 1: This path should point to the root of this repository, not to a bundle inside this repo. Note 2: The second path to the samples is only required if you want to use a sample plugin. Note 3: If nodecg doesn't load nodecg-io for some reason you might want to use an absolute path here.","title":"Add nodecg-io directory to the nodecg config"},{"location":"getting_started/install/#start-nodecg","text":"Now you can use nodecg-io in your own bundle. You can find example code in ./samples/ .","title":"Start nodecg"},{"location":"samples/ahk/","text":"Using the AHK sample bundle The AHK sample bundle in samples/ahk-sendcommand shows how to send a command to a HotkeylessAHK server. Prerequisites Working NodeCG & nodecg-io installation A running HotkeylessAHK setup. Configure the ahk sample bundle Start nodecg with nodecg-io installed. The ahk bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new ahk service instance using the left upper menu. Enter the host and port of the HotkeylessAHK Server. The created instance should be automatically selected, if not select it in the upper left menu. Enter your host and port in monaco (the text-editor on the right) in this format: { \"host\" : \"localhost\" , \"port\" : 42800 } After entering it, click save. Set the created ahk service instance to the service dependency of the ahk bundle. A small window with the text \"Hello World\" should have popped up.","title":"AHK sample"},{"location":"samples/ahk/#using-the-ahk-sample-bundle","text":"The AHK sample bundle in samples/ahk-sendcommand shows how to send a command to a HotkeylessAHK server.","title":"Using the AHK sample bundle"},{"location":"samples/ahk/#prerequisites","text":"Working NodeCG & nodecg-io installation A running HotkeylessAHK setup.","title":"Prerequisites"},{"location":"samples/ahk/#configure-the-ahk-sample-bundle","text":"Start nodecg with nodecg-io installed. The ahk bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new ahk service instance using the left upper menu. Enter the host and port of the HotkeylessAHK Server. The created instance should be automatically selected, if not select it in the upper left menu. Enter your host and port in monaco (the text-editor on the right) in this format: { \"host\" : \"localhost\" , \"port\" : 42800 } After entering it, click save. Set the created ahk service instance to the service dependency of the ahk bundle. A small window with the text \"Hello World\" should have popped up.","title":"Configure the ahk sample bundle"},{"location":"samples/android/","text":"Using the Android sample bundle The Android example bundle in samples/android shows how to connect to an android device and turn on WLAN. clone this Git Repository Run gradlew build (on windows) or ./gradlew build (on linux) inside the cloned repository. There will be an apk file generated in app/build/outputs/apk/debug/app-debug.apk . Install it on the device. Launch the app. You'll be asked to grant the system alert window permission. This is required because the app will do its work in the background. But occasionally when user interaction is required, it needs to launch an activity without the user pressing the app icon in the launcher. Install the android developer tools and make sure you have the adb command in your PATH Enable developer options on you device and enable USB debugging there. See here Run adb start-server Connect your device via USB. You'll be prompted whether you want to allow USB debugging. Press Allow Run adb device -l . The output might look like this: ######## device usb:2-1.7 product:######## model:######## device:######## transport_id:2 The hexadecimal number in the first column is your device id. You'll need this later. Start nodecg with nodecg-io installed. The bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new android service instance using the left upper menu. Enter the following { \"device\": \"device_id\" } Replace device_id with your device id. Set the created android service instance to the service dependency of the android sample bundle. Select the android bundle and the android service in the left bottom menu and then select the service instance that should be used by the android sample bundle (in this case the name of the previously created android instance). You should see that WLAN is now activated on your device.","title":"Android"},{"location":"samples/android/#using-the-android-sample-bundle","text":"The Android example bundle in samples/android shows how to connect to an android device and turn on WLAN. clone this Git Repository Run gradlew build (on windows) or ./gradlew build (on linux) inside the cloned repository. There will be an apk file generated in app/build/outputs/apk/debug/app-debug.apk . Install it on the device. Launch the app. You'll be asked to grant the system alert window permission. This is required because the app will do its work in the background. But occasionally when user interaction is required, it needs to launch an activity without the user pressing the app icon in the launcher. Install the android developer tools and make sure you have the adb command in your PATH Enable developer options on you device and enable USB debugging there. See here Run adb start-server Connect your device via USB. You'll be prompted whether you want to allow USB debugging. Press Allow Run adb device -l . The output might look like this: ######## device usb:2-1.7 product:######## model:######## device:######## transport_id:2 The hexadecimal number in the first column is your device id. You'll need this later. Start nodecg with nodecg-io installed. The bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new android service instance using the left upper menu. Enter the following { \"device\": \"device_id\" } Replace device_id with your device id. Set the created android service instance to the service dependency of the android sample bundle. Select the android bundle and the android service in the left bottom menu and then select the service instance that should be used by the android sample bundle (in this case the name of the previously created android instance). You should see that WLAN is now activated on your device.","title":"Using the Android sample bundle"},{"location":"samples/curseforge/","text":"Using the CurseForge sample bundle The CurseForge example bundle in samples/curseforge demonstrates the ability to search for different addons with the id or search with specific values for matching addons. Here is a guide how to get it working. Prerequisites Working NodeCG & nodecg-io installation Configure the CurseForge bundle Start NodeCG with with nodecg-io installed. The CurseForge bundle is currently part of it, so it should also be loaded. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new CurseForge service instance using the left upper menu. Set the CurseForge service instance to the service dependency of the CurseForge bundle. Select the CurseForge bundle the the CurseForge service in the left bottom menu and then select the service instance that should be used by the CurseForge bundle (in this case the name of the previously created CurseForge instance). Check the NodeCG logs. You should see two lists of addons.","title":"Curseforge sample"},{"location":"samples/curseforge/#using-the-curseforge-sample-bundle","text":"The CurseForge example bundle in samples/curseforge demonstrates the ability to search for different addons with the id or search with specific values for matching addons. Here is a guide how to get it working.","title":"Using the CurseForge sample bundle"},{"location":"samples/curseforge/#prerequisites","text":"Working NodeCG & nodecg-io installation","title":"Prerequisites"},{"location":"samples/curseforge/#configure-the-curseforge-bundle","text":"Start NodeCG with with nodecg-io installed. The CurseForge bundle is currently part of it, so it should also be loaded. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new CurseForge service instance using the left upper menu. Set the CurseForge service instance to the service dependency of the CurseForge bundle. Select the CurseForge bundle the the CurseForge service in the left bottom menu and then select the service instance that should be used by the CurseForge bundle (in this case the name of the previously created CurseForge instance). Check the NodeCG logs. You should see two lists of addons.","title":"Configure the CurseForge bundle"},{"location":"samples/debug/","text":"Using the Debug sample bundle The Debug Helper example bundle in samples/debug demonstrates the ability to use the debug helper to send same sample data to your bundle so you can trigger different features and test/debug them. Prerequisites Working NodeCG & nodecg-io installation Configure the Debug sample bundle Start NodeCG with with nodecg-io installed. The Debug sample bundle is currently part of it, so it should also be loaded. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new Debug service instance using the left upper menu. Set the Deubg service instance to the service dependency of the Debug sample bundle. Select the Debug sample bundle the the Debug service in the left bottom menu and then select the service instance that should be used by the Debug sample bundle (in this case the name of the previously created Debug instance). Go to the nodecg-io-debug dashboard and use some buttons or other inputs. Check the nodecg log. It should contain a message for each action you did and the passed values.","title":"Debug"},{"location":"samples/debug/#using-the-debug-sample-bundle","text":"The Debug Helper example bundle in samples/debug demonstrates the ability to use the debug helper to send same sample data to your bundle so you can trigger different features and test/debug them.","title":"Using the Debug sample bundle"},{"location":"samples/debug/#prerequisites","text":"Working NodeCG & nodecg-io installation","title":"Prerequisites"},{"location":"samples/debug/#configure-the-debug-sample-bundle","text":"Start NodeCG with with nodecg-io installed. The Debug sample bundle is currently part of it, so it should also be loaded. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new Debug service instance using the left upper menu. Set the Deubg service instance to the service dependency of the Debug sample bundle. Select the Debug sample bundle the the Debug service in the left bottom menu and then select the service instance that should be used by the Debug sample bundle (in this case the name of the previously created Debug instance). Go to the nodecg-io-debug dashboard and use some buttons or other inputs. Check the nodecg log. It should contain a message for each action you did and the passed values.","title":"Configure the Debug sample bundle"},{"location":"samples/discord/","text":"Using the Discord sample bundle The Discord-guild-chat example bundle in samples/discord-guild-chat demonstrates the ability to reply with pong to messages which are equal to !ping or ping . Here is a guide to how to get it working. Prerequisites Working NodeCG & nodecg-io installation a Discord Bot token Note: If you don't have such a token yet you can follow this guide. Configure the Discord sample bundle Start nodecg with nodecg-io installed. The Discord-guild-chat bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new discord service instance using the left upper menu. Enter your bot token. The created instance should be automatically selected, if not select it in the upper left menu. Enter your Bot token in monaco (the text-editor on the right) in this format: { \"botToken\" : \"your-token-goes-here\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created discord service instance to the service dependency of the Discord-guild-chat bundle. Select the Discord-guild-chat bundle and the Discord service in the left bottom menu and then select the service instance that should be used by the Discord-guild-chat bundle (in this case the name of the previously created discord instance). Check the nodecg logs You should see an error or a Login message.","title":"Discord sample"},{"location":"samples/discord/#using-the-discord-sample-bundle","text":"The Discord-guild-chat example bundle in samples/discord-guild-chat demonstrates the ability to reply with pong to messages which are equal to !ping or ping . Here is a guide to how to get it working.","title":"Using the Discord sample bundle"},{"location":"samples/discord/#prerequisites","text":"Working NodeCG & nodecg-io installation a Discord Bot token Note: If you don't have such a token yet you can follow this guide.","title":"Prerequisites"},{"location":"samples/discord/#configure-the-discord-sample-bundle","text":"Start nodecg with nodecg-io installed. The Discord-guild-chat bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new discord service instance using the left upper menu. Enter your bot token. The created instance should be automatically selected, if not select it in the upper left menu. Enter your Bot token in monaco (the text-editor on the right) in this format: { \"botToken\" : \"your-token-goes-here\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created discord service instance to the service dependency of the Discord-guild-chat bundle. Select the Discord-guild-chat bundle and the Discord service in the left bottom menu and then select the service instance that should be used by the Discord-guild-chat bundle (in this case the name of the previously created discord instance). Check the nodecg logs You should see an error or a Login message.","title":"Configure the Discord sample bundle"},{"location":"samples/intellij/","text":"Using the IntelliJ sample bundle The IntelliJ example bundle in samples/intellij-integration Shows how to connect to a JetBrains IDE and print all installed plugins. Here is a guide to how to get it working: clone this Git Repository Make sure you've Java 11 or newer installed. Run gradlew build (on windows) or ./gradlew build (on linux) inside the cloned repository. Inside your JetBrains IDE go to Settings and then Plugins . Click on the little gear in the top right corner. Then click Install from file . Navigate to path to your cloned repository/build/libs and select the jar file there. Restart the IDE Start nodecg with nodecg-io installed. The bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new intellij service instance using the left upper menu. Enter the following { \"address\": \"127.0.0.1:19524\" } This tells nodecg-io to look for your IDE's HTTP server on your computer at port 19524 . If you want it to run on another port please follow the guidelines here Set the created intellij service instance to the service dependency of the sample-intellij bundle. Select the sample-intellij bundle and the intellij service in the left bottom menu and then select the service instance that should be used by the sample-intellij bundle (in this case the name of the previously created intellij instance). Check the nodecg logs You should see an error or a list of all plugins installed at your IDE including the preinstalled ones by JetBrains.","title":"IntelliJ sample"},{"location":"samples/intellij/#using-the-intellij-sample-bundle","text":"The IntelliJ example bundle in samples/intellij-integration Shows how to connect to a JetBrains IDE and print all installed plugins. Here is a guide to how to get it working: clone this Git Repository Make sure you've Java 11 or newer installed. Run gradlew build (on windows) or ./gradlew build (on linux) inside the cloned repository. Inside your JetBrains IDE go to Settings and then Plugins . Click on the little gear in the top right corner. Then click Install from file . Navigate to path to your cloned repository/build/libs and select the jar file there. Restart the IDE Start nodecg with nodecg-io installed. The bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new intellij service instance using the left upper menu. Enter the following { \"address\": \"127.0.0.1:19524\" } This tells nodecg-io to look for your IDE's HTTP server on your computer at port 19524 . If you want it to run on another port please follow the guidelines here Set the created intellij service instance to the service dependency of the sample-intellij bundle. Select the sample-intellij bundle and the intellij service in the left bottom menu and then select the service instance that should be used by the sample-intellij bundle (in this case the name of the previously created intellij instance). Check the nodecg logs You should see an error or a list of all plugins installed at your IDE including the preinstalled ones by JetBrains.","title":"Using the IntelliJ sample bundle"},{"location":"samples/irc/","text":"Using the IRC sample bundle The IRC example bundle in samples/irc demonstrates the ability to get access to a IRC chat. This sample is designed to log the twitch IRC chat of skate702. Prerequisites Working NodeCG & nodecg-io installation Configure the IRC sample bundle Start nodecg with nodecg-io installed. The irc sample bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new irc service instance using the left upper menu. Enter credentials for irc. The created instance should be automatically selected, if not select it in the upper left menu. In this example we will anonyoumously connect to the twitch IRC chat. Enter the config in this format: { \"host\" : \"irc.chat.twitch.tv\" , \"port\" : 6667 , \"nick\" : \"justinfan123456\" } Where you may want to change the numbers of the nick to be unique to you. After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created irc service instance to the service dependency of the irc sample bundle. Select the irc sample bundle and the irc service in the left bottom menu and then select the service instance that should be used by the irc sample bundle (in this case the name of the previously created irc instance). Check the nodecg logs You should see an error or a success message and all twitch messages that are written in the twitch channel that is hardcoded in samples/irc/extension/index.ts .","title":"IRC"},{"location":"samples/irc/#using-the-irc-sample-bundle","text":"The IRC example bundle in samples/irc demonstrates the ability to get access to a IRC chat. This sample is designed to log the twitch IRC chat of skate702.","title":"Using the IRC sample bundle"},{"location":"samples/irc/#prerequisites","text":"Working NodeCG & nodecg-io installation","title":"Prerequisites"},{"location":"samples/irc/#configure-the-irc-sample-bundle","text":"Start nodecg with nodecg-io installed. The irc sample bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new irc service instance using the left upper menu. Enter credentials for irc. The created instance should be automatically selected, if not select it in the upper left menu. In this example we will anonyoumously connect to the twitch IRC chat. Enter the config in this format: { \"host\" : \"irc.chat.twitch.tv\" , \"port\" : 6667 , \"nick\" : \"justinfan123456\" } Where you may want to change the numbers of the nick to be unique to you. After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created irc service instance to the service dependency of the irc sample bundle. Select the irc sample bundle and the irc service in the left bottom menu and then select the service instance that should be used by the irc sample bundle (in this case the name of the previously created irc instance). Check the nodecg logs You should see an error or a success message and all twitch messages that are written in the twitch channel that is hardcoded in samples/irc/extension/index.ts .","title":"Configure the IRC sample bundle"},{"location":"samples/midi-input/","text":"Using the midi-input sample bundle The midi-input example bundle in samples/midi-input demonstrates the the ability to read data from a midi device. Prerequisites Working NodeCG & nodecg-io installation A midi device that can be connected to your computer Configure the midi-input sample bundle Start nodecg with nodecg-io installed. The Twitch-chat bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new midi-input service instance using the left upper menu. Enter your device information The created instance should be automatically selected, if not select it in the upper left menu. Enter the name of your device in monaco (the texteditor on the right) in this format: { \"device\" : \"name\" } After entering it, click save. Note: A script is provided to list all inputs and outputs. It can be run from the sample directory samples/midi-input using the command npm run list . The devices should be listed with their device names and some other stuff. under linux this looks for example like this: nanoKONTROL2:nanoKONTROL2 MIDI 1 28:0 Note: If you don't see monaco on the right, try reloading the page. Set the created midi-input service instance to the service dependency of the midi-input sample bundle. Select the midi-input bundle and the midi-input service in the left bottom menu and then select the service instance that should be used by the midi-input bundle (in this case the name of the previously created midi-input instance). Check the nodecg logs You should see an error or a success message and all midi messages that are sent by the device that is configured.","title":"Midi-Input sample"},{"location":"samples/midi-input/#using-the-midi-input-sample-bundle","text":"The midi-input example bundle in samples/midi-input demonstrates the the ability to read data from a midi device.","title":"Using the midi-input sample bundle"},{"location":"samples/midi-input/#prerequisites","text":"Working NodeCG & nodecg-io installation A midi device that can be connected to your computer","title":"Prerequisites"},{"location":"samples/midi-input/#configure-the-midi-input-sample-bundle","text":"Start nodecg with nodecg-io installed. The Twitch-chat bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new midi-input service instance using the left upper menu. Enter your device information The created instance should be automatically selected, if not select it in the upper left menu. Enter the name of your device in monaco (the texteditor on the right) in this format: { \"device\" : \"name\" } After entering it, click save. Note: A script is provided to list all inputs and outputs. It can be run from the sample directory samples/midi-input using the command npm run list . The devices should be listed with their device names and some other stuff. under linux this looks for example like this: nanoKONTROL2:nanoKONTROL2 MIDI 1 28:0 Note: If you don't see monaco on the right, try reloading the page. Set the created midi-input service instance to the service dependency of the midi-input sample bundle. Select the midi-input bundle and the midi-input service in the left bottom menu and then select the service instance that should be used by the midi-input bundle (in this case the name of the previously created midi-input instance). Check the nodecg logs You should see an error or a success message and all midi messages that are sent by the device that is configured.","title":"Configure the midi-input sample bundle"},{"location":"samples/midi-io/","text":"Using the midi-io sample bundle The midi-io example bundle in samples/midi-io demonstrates the the ability to send/recieve data to/from a midi device. Prerequisites Working NodeCG & nodecg-io installation A midi device that can be connected to your computer Configure the midi-io sample bundle Start nodecg with nodecg-io installed. The midi-io bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new midi-input service instance using the left upper menu. Enter your device information The created instance should be automatically selected, if not select it in the upper left menu. Enter the name of your device in monaco (the texteditor on the right) in this format: { \"device\" : \"name\" } After entering it, click save. Note: A script is provided to list all inputs and outputs. It can be run from the sample directory samples/midi-io using the command npm run list . The devices should be listed with their device names and some other stuff. under linux this looks for example like this: nanoKONTROL2:nanoKONTROL2 MIDI 1 28:0 Note: If you don't see monaco on the right, try reloading the page. Create a new midi-output service instance using the left upper menu. Repeat step 5 for your midi-output service. In most cases you want to use the same device for input and output. Set the created midi-output service instance to the service dependency of the midi-io sample bundle. Select the midi-io bundle and the midi-output service in the left bottom menu and then select the service instance that should be used by the midi-io bundle (in this case the name of the previously created midi-output instance). Set the created midi-input service instance to the service dependency of the midi-io sample bundle. Select the midi-io bundle and the midi-input service in the left bottom menu and then select the service instance that should be used by the midi-io bundle (in this case the name of the previously created midi-input instance). Check the nodecg logs You should see an error or a success message and midi messages that are recieved and echoed back to the device that is configured. The messages are only modified, if the recieved Message is a noteon with a velocity of greater than zero or a control change message with a value of at least 64. Noteoff messages are always echoed unmodified. Note A noteon message with a velocity of 0 should be handled like a noteoff message, so they are echoed unmodified. Otherwise this would get annoying very fast. If a control change is assigned to a pushbutten values of 64 and up are interpreted as on and values lower than that are interpreted as off. Most somewhat modern Midi devices send 127 as on and 0 as off, but 63 and 64 should also be sufficient.","title":"Midi-IO sample"},{"location":"samples/midi-io/#using-the-midi-io-sample-bundle","text":"The midi-io example bundle in samples/midi-io demonstrates the the ability to send/recieve data to/from a midi device.","title":"Using the midi-io sample bundle"},{"location":"samples/midi-io/#prerequisites","text":"Working NodeCG & nodecg-io installation A midi device that can be connected to your computer","title":"Prerequisites"},{"location":"samples/midi-io/#configure-the-midi-io-sample-bundle","text":"Start nodecg with nodecg-io installed. The midi-io bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new midi-input service instance using the left upper menu. Enter your device information The created instance should be automatically selected, if not select it in the upper left menu. Enter the name of your device in monaco (the texteditor on the right) in this format: { \"device\" : \"name\" } After entering it, click save. Note: A script is provided to list all inputs and outputs. It can be run from the sample directory samples/midi-io using the command npm run list . The devices should be listed with their device names and some other stuff. under linux this looks for example like this: nanoKONTROL2:nanoKONTROL2 MIDI 1 28:0 Note: If you don't see monaco on the right, try reloading the page. Create a new midi-output service instance using the left upper menu. Repeat step 5 for your midi-output service. In most cases you want to use the same device for input and output. Set the created midi-output service instance to the service dependency of the midi-io sample bundle. Select the midi-io bundle and the midi-output service in the left bottom menu and then select the service instance that should be used by the midi-io bundle (in this case the name of the previously created midi-output instance). Set the created midi-input service instance to the service dependency of the midi-io sample bundle. Select the midi-io bundle and the midi-input service in the left bottom menu and then select the service instance that should be used by the midi-io bundle (in this case the name of the previously created midi-input instance). Check the nodecg logs You should see an error or a success message and midi messages that are recieved and echoed back to the device that is configured. The messages are only modified, if the recieved Message is a noteon with a velocity of greater than zero or a control change message with a value of at least 64. Noteoff messages are always echoed unmodified.","title":"Configure the midi-io sample bundle"},{"location":"samples/midi-io/#note","text":"A noteon message with a velocity of 0 should be handled like a noteoff message, so they are echoed unmodified. Otherwise this would get annoying very fast. If a control change is assigned to a pushbutten values of 64 and up are interpreted as on and values lower than that are interpreted as off. Most somewhat modern Midi devices send 127 as on and 0 as off, but 63 and 64 should also be sufficient.","title":"Note"},{"location":"samples/midi-output/","text":"Using the midi-output sample bundle The midi-output example bundle in samples/midi-output demonstrates the the ability to send data to a midi device. Prerequisites Working NodeCG & nodecg-io installation A midi device that can be connected to your computer Configure the midi-output sample bundle Start nodecg with nodecg-io installed. The midi-output bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new midi-output service instance using the left upper menu. Enter your device information The created instance should be automatically selected, if not select it in the upper left menu. Enter the name of your device in monaco (the texteditor on the right) in this format: { \"device\" : \"name\" } After entering it, click save. Note: A script is provided to list all inputs and outputs. It can be run from the sample directory samples/midi-output using the command npm run list . The devices should be listed with their device names and some other stuff. under linux this looks for example like this: nanoKONTROL2:nanoKONTROL2 MIDI 1 28:0 Note: If you don't see monaco on the right, try reloading the page. Set the created midi-output service instance to the service dependency of the midi-output sample bundle. Select the midi-output bundle and the midi-output service in the left bottom menu and then select the service instance that should be used by the midi-output bundle (in this case the name of the previously created midi-output instance). Check the nodecg logs You should see an error or a success message and random midi messages should be sent to the device that is configured. The messages are only \"note on\" messages and have a random note and velocity value ranging 0-127. The channels they are send from are either channel 0 or 1, but the midi protocoll supports up to 16 channels, so it could technically range from 0-15. Note Only sending \"note on\" messages is sufficient for most midi, because most of them don't really care if you use proper \"note off\" messages or simply send a \"note on\" with a velocity of 0. This is due to the early days of midi, when integrated circuits were expensive. Allowing a velocity of 0 as replacement for \"note off\" made instruments featuring midi more affordable.","title":"Midi-Output sample"},{"location":"samples/midi-output/#using-the-midi-output-sample-bundle","text":"The midi-output example bundle in samples/midi-output demonstrates the the ability to send data to a midi device.","title":"Using the midi-output sample bundle"},{"location":"samples/midi-output/#prerequisites","text":"Working NodeCG & nodecg-io installation A midi device that can be connected to your computer","title":"Prerequisites"},{"location":"samples/midi-output/#configure-the-midi-output-sample-bundle","text":"Start nodecg with nodecg-io installed. The midi-output bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new midi-output service instance using the left upper menu. Enter your device information The created instance should be automatically selected, if not select it in the upper left menu. Enter the name of your device in monaco (the texteditor on the right) in this format: { \"device\" : \"name\" } After entering it, click save. Note: A script is provided to list all inputs and outputs. It can be run from the sample directory samples/midi-output using the command npm run list . The devices should be listed with their device names and some other stuff. under linux this looks for example like this: nanoKONTROL2:nanoKONTROL2 MIDI 1 28:0 Note: If you don't see monaco on the right, try reloading the page. Set the created midi-output service instance to the service dependency of the midi-output sample bundle. Select the midi-output bundle and the midi-output service in the left bottom menu and then select the service instance that should be used by the midi-output bundle (in this case the name of the previously created midi-output instance). Check the nodecg logs You should see an error or a success message and random midi messages should be sent to the device that is configured. The messages are only \"note on\" messages and have a random note and velocity value ranging 0-127. The channels they are send from are either channel 0 or 1, but the midi protocoll supports up to 16 channels, so it could technically range from 0-15.","title":"Configure the midi-output sample bundle"},{"location":"samples/midi-output/#note","text":"Only sending \"note on\" messages is sufficient for most midi, because most of them don't really care if you use proper \"note off\" messages or simply send a \"note on\" with a velocity of 0. This is due to the early days of midi, when integrated circuits were expensive. Allowing a velocity of 0 as replacement for \"note off\" made instruments featuring midi more affordable.","title":"Note"},{"location":"samples/obs/","text":"Using the OBS sample bundle The OBS example bundle in samples/obs-scenelist demonstrates the ability to control a OBS instance by listing all available scenes. Here is a guide to how to get it working. Prerequisites Working NodeCG & nodecg-io installation OBS with obs-websocket installed Note: OBS is available here and obs-websocket with install instructions is available here . Configure the OBS sample bundle Start nodecg with nodecg-io installed. The obs-scenelist bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new obs service instance using the left upper menu. Enter config for obs. The created instance should be automatically selected, if not select it in the upper left menu. Enter your obs-websocket connection information in monaco (the texteditor on the right) in this format: { \"host\" : \"localhost\" , \"port\" : 4444 , \"password\" : \"mypassword12345678\" } If you don't want to use a password you can just remove the password property from the config. After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created obs service instance to the service dependency of the obs-scenelist bundle. Select the obs-scenelist bundle and the OBS service in the left bottom menu and then select the service instance that should be used by the obs-scenelist bundle (in this case the name of the previously created OBS instance). Check the nodecg logs You should see an error or a success message and the names of all you scenes that you have set in OBS.","title":"OBS"},{"location":"samples/obs/#using-the-obs-sample-bundle","text":"The OBS example bundle in samples/obs-scenelist demonstrates the ability to control a OBS instance by listing all available scenes. Here is a guide to how to get it working.","title":"Using the OBS sample bundle"},{"location":"samples/obs/#prerequisites","text":"Working NodeCG & nodecg-io installation OBS with obs-websocket installed Note: OBS is available here and obs-websocket with install instructions is available here .","title":"Prerequisites"},{"location":"samples/obs/#configure-the-obs-sample-bundle","text":"Start nodecg with nodecg-io installed. The obs-scenelist bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new obs service instance using the left upper menu. Enter config for obs. The created instance should be automatically selected, if not select it in the upper left menu. Enter your obs-websocket connection information in monaco (the texteditor on the right) in this format: { \"host\" : \"localhost\" , \"port\" : 4444 , \"password\" : \"mypassword12345678\" } If you don't want to use a password you can just remove the password property from the config. After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created obs service instance to the service dependency of the obs-scenelist bundle. Select the obs-scenelist bundle and the OBS service in the left bottom menu and then select the service instance that should be used by the obs-scenelist bundle (in this case the name of the previously created OBS instance). Check the nodecg logs You should see an error or a success message and the names of all you scenes that you have set in OBS.","title":"Configure the OBS sample bundle"},{"location":"samples/philipshue/","text":"Using the Philips Hue sample bundle The philipshue-lights example bundle in samples/philipshue-lights demonstrates the ability to connect to the Philips Hue bridge and control philips hue accessories. Prerequisites Working NodeCG & nodecg-io installation A Philips Hue bridge with some connected accessories Configure the Philips Hue sample bundle Start nodecg with nodecg-io installed. The philipshue-lights sample bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new philipshue service instance using the left upper menu. Enter config for hue. The created instance should be automatically selected, if not select it in the upper left menu. If you want the bridge to be automatically discovered just set discover to true like this: { \"discover\" : true } If you want to provide the ip address manually you can provide them like this: { \"discover\" : false , \"ipAddr\" : \"x.x.x.x\" } After entering it, press the big link button on your bridge and then click save. After the first time you connect to your bridge it will create a user and an apiKey which will be saved so that you only need to press the link button when you connect it for the first time. Note: If you don't see monaco on the right, try reloading the page. Set the created philipshue service instance to the service dependency of the philipshue-lights sample bundle. Select the philipshue-lights sample bundle and the philipshue service in the left bottom menu and then select the service instance that should be used by the philipshue-lights sample bundle (in this case the name of the previously created philipshue instance). Check the nodecg logs You should see an error or a success message and the number of lights that the bridge knows of.","title":"Philips Hue sample"},{"location":"samples/philipshue/#using-the-philips-hue-sample-bundle","text":"The philipshue-lights example bundle in samples/philipshue-lights demonstrates the ability to connect to the Philips Hue bridge and control philips hue accessories.","title":"Using the Philips Hue sample bundle"},{"location":"samples/philipshue/#prerequisites","text":"Working NodeCG & nodecg-io installation A Philips Hue bridge with some connected accessories","title":"Prerequisites"},{"location":"samples/philipshue/#configure-the-philips-hue-sample-bundle","text":"Start nodecg with nodecg-io installed. The philipshue-lights sample bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new philipshue service instance using the left upper menu. Enter config for hue. The created instance should be automatically selected, if not select it in the upper left menu. If you want the bridge to be automatically discovered just set discover to true like this: { \"discover\" : true } If you want to provide the ip address manually you can provide them like this: { \"discover\" : false , \"ipAddr\" : \"x.x.x.x\" } After entering it, press the big link button on your bridge and then click save. After the first time you connect to your bridge it will create a user and an apiKey which will be saved so that you only need to press the link button when you connect it for the first time. Note: If you don't see monaco on the right, try reloading the page. Set the created philipshue service instance to the service dependency of the philipshue-lights sample bundle. Select the philipshue-lights sample bundle and the philipshue service in the left bottom menu and then select the service instance that should be used by the philipshue-lights sample bundle (in this case the name of the previously created philipshue instance). Check the nodecg logs You should see an error or a success message and the number of lights that the bridge knows of.","title":"Configure the Philips Hue sample bundle"},{"location":"samples/rcon/","text":"Using the RCON sample bundle The rcon sample bundle in samples/rcon-minecraft shows how to send a command to a minecraft server. Prerequisites Working NodeCG & nodecg-io installation A working Minecraft server. Configure the rcon sample bundle Start nodecg with nodecg-io installed. The rcon bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new rcon service instance using the left upper menu. Enter the host, port and password of the rcon connection. This can be found in the server.properties file (rcon.port, rcon.password) The created instance should be automatically selected, if not select it in the upper left menu. Enter your host and port in monaco (the text-editor on the right) in this format: { \"host\" : \"localhost\" , \"port\" : 25575 , \"password:\" : \"ThisIsAVeryGoodPassword\" } After entering it, click save. Set the created rcon service instance to the service dependency of the rcon-minecraft bundle. In the nodecg console you will see a list with all online players. It will also send a /say command to the minecraft server.","title":"Rcon sample"},{"location":"samples/rcon/#using-the-rcon-sample-bundle","text":"The rcon sample bundle in samples/rcon-minecraft shows how to send a command to a minecraft server.","title":"Using the RCON sample bundle"},{"location":"samples/rcon/#prerequisites","text":"Working NodeCG & nodecg-io installation A working Minecraft server.","title":"Prerequisites"},{"location":"samples/rcon/#configure-the-rcon-sample-bundle","text":"Start nodecg with nodecg-io installed. The rcon bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new rcon service instance using the left upper menu. Enter the host, port and password of the rcon connection. This can be found in the server.properties file (rcon.port, rcon.password) The created instance should be automatically selected, if not select it in the upper left menu. Enter your host and port in monaco (the text-editor on the right) in this format: { \"host\" : \"localhost\" , \"port\" : 25575 , \"password:\" : \"ThisIsAVeryGoodPassword\" } After entering it, click save. Set the created rcon service instance to the service dependency of the rcon-minecraft bundle. In the nodecg console you will see a list with all online players. It will also send a /say command to the minecraft server.","title":"Configure the rcon sample bundle"},{"location":"samples/reddit/","text":"Using the Reddit sample bundle The reddit-message-read example bundle in samples/reddit-msg-read demonstrates the ability to read recent posts from a subreddit (in this case r/skate702 ) Prerequisites Working NodeCG & nodecg-io installation a Reddit Application (Should be of type script for own purpose) Note: If you don't have such an application yet you can get one here . Configure the Reddit sample bundle Start nodecg with nodecg-io installed. The reddit-message-read bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new reddit service instance using the left upper menu. Enter your applications id and secret and your own username and password. Zhe entered username and password must be for the user who registered the application. The created instance should be automatically selected, if not select it in the upper left menu. Enter your data in monaco (the text-editor on the right) in this format: { \"clientId\" : \"Your client Id (This is displayed right below the application name)\" , \"clientSecret\" : \"Your client secret\" , \"username\" : \"Your username\" , \"password\" : \"Your password\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created reddit service instance to the service dependency of the reddit-message-read bundle. Select the reddit-message-read bundle and the Reddit service in the left bottom menu and then select the service instance that should be used by the reddit-message-read bundle (in this case the name of the previously created reddit instance). Check the nodecg logs You should see the recent posts in r/skate702","title":"Reddit sample"},{"location":"samples/reddit/#using-the-reddit-sample-bundle","text":"The reddit-message-read example bundle in samples/reddit-msg-read demonstrates the ability to read recent posts from a subreddit (in this case r/skate702 )","title":"Using the Reddit sample bundle"},{"location":"samples/reddit/#prerequisites","text":"Working NodeCG & nodecg-io installation a Reddit Application (Should be of type script for own purpose) Note: If you don't have such an application yet you can get one here .","title":"Prerequisites"},{"location":"samples/reddit/#configure-the-reddit-sample-bundle","text":"Start nodecg with nodecg-io installed. The reddit-message-read bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new reddit service instance using the left upper menu. Enter your applications id and secret and your own username and password. Zhe entered username and password must be for the user who registered the application. The created instance should be automatically selected, if not select it in the upper left menu. Enter your data in monaco (the text-editor on the right) in this format: { \"clientId\" : \"Your client Id (This is displayed right below the application name)\" , \"clientSecret\" : \"Your client secret\" , \"username\" : \"Your username\" , \"password\" : \"Your password\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created reddit service instance to the service dependency of the reddit-message-read bundle. Select the reddit-message-read bundle and the Reddit service in the left bottom menu and then select the service instance that should be used by the reddit-message-read bundle (in this case the name of the previously created reddit instance). Check the nodecg logs You should see the recent posts in r/skate702","title":"Configure the Reddit sample bundle"},{"location":"samples/sacn-receiver/","text":"Using the sACN receiver sample bundle The sacn-receiver-sample example bundle in samples/sacn-receiver-sample demonstrates the ability receive data send via sACN from e.g professional lighting consoles. Here is a guide to how to get it working. Prerequisites Working NodeCG & nodecg-io installation A working sACN sender in the current network Configure the Discord sample bundle Start nodecg with nodecg-io installed. The sacn-receiver-sample bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new sacn-receiver service instance using the left upper menu. Enter the needed options. The created instance should be automatically selected, if not select it in the upper left menu. Enter your Bot token in monaco (the texteditor on the right) in this format: Universes The universes to use. Must be an array with numbers within 1-63999 { \"universes\" : [ 1 , 2 , 3 ] } Port Optional. The multicast port to use. All professional consoles broadcast to the default port 5568. { \"universes\" : [ 1 , 2 , 3 ], \"port\" : 5568 } Iface Optional. If the computer is connected to multiple networks, specify which network adaptor to use by using this computer's local IP address. { \"universes\" : [ 1 , 2 , 3 ], \"iface\" : \"Network Adapter\" } ReuseAddr Optional. Allow multiple programs on your computer to listen to the same sACN universe. { \"universes\" : [ 1 , 2 , 3 ], \"reuseAddr\" : true } After entering it/them, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created sacn-receiver service instance to the service dependency of the sacn-receiver-sample bundle. Select the sacn-receiver-sample bundle and the sacn-receiver service in the left bottom menu and then select the service instance that should be used by the sacn-receiver-sample bundle (in this case the name of the previously created sACN instance). Check the nodecg logs You should see data logged.","title":"sACN Receiver sample"},{"location":"samples/sacn-receiver/#using-the-sacn-receiver-sample-bundle","text":"The sacn-receiver-sample example bundle in samples/sacn-receiver-sample demonstrates the ability receive data send via sACN from e.g professional lighting consoles. Here is a guide to how to get it working.","title":"Using the sACN receiver sample bundle"},{"location":"samples/sacn-receiver/#prerequisites","text":"Working NodeCG & nodecg-io installation A working sACN sender in the current network","title":"Prerequisites"},{"location":"samples/sacn-receiver/#configure-the-discord-sample-bundle","text":"Start nodecg with nodecg-io installed. The sacn-receiver-sample bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new sacn-receiver service instance using the left upper menu. Enter the needed options. The created instance should be automatically selected, if not select it in the upper left menu. Enter your Bot token in monaco (the texteditor on the right) in this format: Universes The universes to use. Must be an array with numbers within 1-63999 { \"universes\" : [ 1 , 2 , 3 ] } Port Optional. The multicast port to use. All professional consoles broadcast to the default port 5568. { \"universes\" : [ 1 , 2 , 3 ], \"port\" : 5568 } Iface Optional. If the computer is connected to multiple networks, specify which network adaptor to use by using this computer's local IP address. { \"universes\" : [ 1 , 2 , 3 ], \"iface\" : \"Network Adapter\" } ReuseAddr Optional. Allow multiple programs on your computer to listen to the same sACN universe. { \"universes\" : [ 1 , 2 , 3 ], \"reuseAddr\" : true } After entering it/them, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created sacn-receiver service instance to the service dependency of the sacn-receiver-sample bundle. Select the sacn-receiver-sample bundle and the sacn-receiver service in the left bottom menu and then select the service instance that should be used by the sacn-receiver-sample bundle (in this case the name of the previously created sACN instance). Check the nodecg logs You should see data logged.","title":"Configure the Discord sample bundle"},{"location":"samples/sacn-sender/","text":"Using the sACN sender sample bundle The sacn-sender example bundle in samples/sacn-sender demonstrates the ability send data via sACN to e.g open lighting architecture or professional lighting equipment. Here is a guide to how to get it working. Prerequisites Working NodeCG & nodecg-io installation A working sACN receiver in the current network Configure the Discord sample bundle Start nodecg with nodecg-io installed. The sacn-receiver-sample bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new sacn-sender service instance using the left upper menu. Enter the needed options. The created instance should be automatically selected, if not select it in the upper left menu. Enter your universe in monaco (the texteditor on the right) in this format: Universes The universes to use. Must be an array with numbers within 1-63999 { \"universe\" : 1 } Port Optional. The multicast port to use. All professional consoles broadcast to the default port 5568. { \"universes\" : 1 , \"port\" : 5568 } ReuseAddr Optional. Allow multiple programs on your computer to listen to the same sACN universe. { \"universes\" : 1 , \"reuseAddr\" : true } After entering it/them, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created sacn-sender service instance to the service dependency of the sacn-sender bundle. Select the sacn-sender bundle and the sacn-sender service in the left bottom menu and then select the service instance that should be used by the sacn-sender bundle (in this case the name of the previously created sACN instance). Check the nodecg logs You should see data logged.","title":"sACN Sender sample"},{"location":"samples/sacn-sender/#using-the-sacn-sender-sample-bundle","text":"The sacn-sender example bundle in samples/sacn-sender demonstrates the ability send data via sACN to e.g open lighting architecture or professional lighting equipment. Here is a guide to how to get it working.","title":"Using the sACN sender sample bundle"},{"location":"samples/sacn-sender/#prerequisites","text":"Working NodeCG & nodecg-io installation A working sACN receiver in the current network","title":"Prerequisites"},{"location":"samples/sacn-sender/#configure-the-discord-sample-bundle","text":"Start nodecg with nodecg-io installed. The sacn-receiver-sample bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new sacn-sender service instance using the left upper menu. Enter the needed options. The created instance should be automatically selected, if not select it in the upper left menu. Enter your universe in monaco (the texteditor on the right) in this format: Universes The universes to use. Must be an array with numbers within 1-63999 { \"universe\" : 1 } Port Optional. The multicast port to use. All professional consoles broadcast to the default port 5568. { \"universes\" : 1 , \"port\" : 5568 } ReuseAddr Optional. Allow multiple programs on your computer to listen to the same sACN universe. { \"universes\" : 1 , \"reuseAddr\" : true } After entering it/them, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created sacn-sender service instance to the service dependency of the sacn-sender bundle. Select the sacn-sender bundle and the sacn-sender service in the left bottom menu and then select the service instance that should be used by the sacn-sender bundle (in this case the name of the previously created sACN instance). Check the nodecg logs You should see data logged.","title":"Configure the Discord sample bundle"},{"location":"samples/serial/","text":"Using the serial sample bundle The serial example bundle in samples/serial demonstrates the ability to exchange data with a device that is connected via serial. Here is a guide to how to get it working. Prerequisites Working NodeCG & nodecg-io installation An Arduino or any other microcontroller development board that can send and receive data via serial. Configure the serial sample bundle Load a simple serial echo sketch on your microcontroller. You can find a working arduino sketch at the end of this article. Start nodecg with nodecg-io installed. The serial bundle is currently part of it so it should also be loaded. Make shure the device is already connected. Otherwise you wont be able to see the device. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new serial service instance using the left upper menu. Enter the information of your device. The created instance should be automatically selected, if not select it in the upper left menu. Enter the com port or other identifying information in one of these formats: { \"device\" : { \"port\" : \"COM1\" } } { \"device\" : { \"pnpId\" : \"usb-Arduino__www.arduino.cc__0043_75835343030351E0D171-if00\" } } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Note: If you want to list all connected devices you can open a terminal in nodecg-io-serial and run npm run list . Note: If you are using multiple devices you might want to use the pnpId, since ports can change between reboots! Set the created serial service instance to the service dependency of the serial bundle. Select the serial bundle and the serial service in the left bottom menu and then select the service instance that should be used by the serial bundle (in this case the name of the previously created serial instance). Check the nodecg logs You should see an error or a success message and nodecg-io will send ping to the microcontroller every 10 seconds. The arduino device will respond with pong. You should see the pong message displayed in the log. If you see an error or nothing at all, try making sure your microcontroller is plugged in and recognized correctly. Then restart nodecg, so the service is cleanly restarted. Sample arduino sketch String inputString = \"\" ; boolean stringComplete = false ; void setup () { Serial . begin ( 9600 ); } // the loop routine runs over and over again forever void loop () { while ( Serial . available ()) { char inChar = ( char ) Serial . read (); inputString += inChar ; if ( inChar == '\\n' ) { stringComplete = true ; } } if ( stringComplete ) { Serial . println ( \"pong\" ); stringComplete = false ; } delay ( 1 ); // delay in between reads for stability }","title":"Serial sample"},{"location":"samples/serial/#using-the-serial-sample-bundle","text":"The serial example bundle in samples/serial demonstrates the ability to exchange data with a device that is connected via serial. Here is a guide to how to get it working.","title":"Using the serial sample bundle"},{"location":"samples/serial/#prerequisites","text":"Working NodeCG & nodecg-io installation An Arduino or any other microcontroller development board that can send and receive data via serial.","title":"Prerequisites"},{"location":"samples/serial/#configure-the-serial-sample-bundle","text":"Load a simple serial echo sketch on your microcontroller. You can find a working arduino sketch at the end of this article. Start nodecg with nodecg-io installed. The serial bundle is currently part of it so it should also be loaded. Make shure the device is already connected. Otherwise you wont be able to see the device. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new serial service instance using the left upper menu. Enter the information of your device. The created instance should be automatically selected, if not select it in the upper left menu. Enter the com port or other identifying information in one of these formats: { \"device\" : { \"port\" : \"COM1\" } } { \"device\" : { \"pnpId\" : \"usb-Arduino__www.arduino.cc__0043_75835343030351E0D171-if00\" } } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Note: If you want to list all connected devices you can open a terminal in nodecg-io-serial and run npm run list . Note: If you are using multiple devices you might want to use the pnpId, since ports can change between reboots! Set the created serial service instance to the service dependency of the serial bundle. Select the serial bundle and the serial service in the left bottom menu and then select the service instance that should be used by the serial bundle (in this case the name of the previously created serial instance). Check the nodecg logs You should see an error or a success message and nodecg-io will send ping to the microcontroller every 10 seconds. The arduino device will respond with pong. You should see the pong message displayed in the log. If you see an error or nothing at all, try making sure your microcontroller is plugged in and recognized correctly. Then restart nodecg, so the service is cleanly restarted.","title":"Configure the serial sample bundle"},{"location":"samples/serial/#sample-arduino-sketch","text":"String inputString = \"\" ; boolean stringComplete = false ; void setup () { Serial . begin ( 9600 ); } // the loop routine runs over and over again forever void loop () { while ( Serial . available ()) { char inChar = ( char ) Serial . read (); inputString += inChar ; if ( inChar == '\\n' ) { stringComplete = true ; } } if ( stringComplete ) { Serial . println ( \"pong\" ); stringComplete = false ; } delay ( 1 ); // delay in between reads for stability }","title":"Sample arduino sketch"},{"location":"samples/slack/","text":"Using the Slack sample bundle The Slack example bundle in samples/slack-post demonstrates the ability to list all channels into the console and sends an message to an channel witch you has to configure to your channel id Prerequisites Working NodeCG & nodecg-io installation a Slack Bot token Note: If you don't have such a token yet you can create your on app with token on this page. Configure the Slack sample bundle Start nodecg with nodecg-io installed. The slack bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new slack service instance using the left upper menu. Enter your slack app token. The created instance should be automatically selected, if not select it in the upper left menu. Enter your token in monaco (the text-editor on the right) in this format: { \"token\" : \"your-token-goes-here\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created slack service instance to the service dependency of the slack bundle. Select the slack bundle and the slack service in the left bottom menu and then select the service instance that should be used by the slack bundle (in this case the name of the previously created slack instance). Check the nodecg logs You should see an error or a Login message.","title":"Slack sample"},{"location":"samples/slack/#using-the-slack-sample-bundle","text":"The Slack example bundle in samples/slack-post demonstrates the ability to list all channels into the console and sends an message to an channel witch you has to configure to your channel id","title":"Using the Slack sample bundle"},{"location":"samples/slack/#prerequisites","text":"Working NodeCG & nodecg-io installation a Slack Bot token Note: If you don't have such a token yet you can create your on app with token on this page.","title":"Prerequisites"},{"location":"samples/slack/#configure-the-slack-sample-bundle","text":"Start nodecg with nodecg-io installed. The slack bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new slack service instance using the left upper menu. Enter your slack app token. The created instance should be automatically selected, if not select it in the upper left menu. Enter your token in monaco (the text-editor on the right) in this format: { \"token\" : \"your-token-goes-here\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created slack service instance to the service dependency of the slack bundle. Select the slack bundle and the slack service in the left bottom menu and then select the service instance that should be used by the slack bundle (in this case the name of the previously created slack instance). Check the nodecg logs You should see an error or a Login message.","title":"Configure the Slack sample bundle"},{"location":"samples/spotify/","text":"Using the Spotify sample bundle The spotify-current-song example bundle in samples/spotify-current-song demonstrates the ability to get the current playing song of a user. Here is a guide to how to get it working. Prerequisites Working NodeCG & nodecg-io installation A Spotify account and a registered Spotify application and the accosiated client id/client secret. Note: If you don't have a registered application yet you can follow this guide . As a redirect url use http://localhost:9090/nodecg-io-spotify/spotifycallback . Configure the Spotify sample bundle Start nodecg with nodecg-io installed. The spotify-current-song bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new spotify service instance using the left upper menu. Enter credentials for spotify. The created instance should be automatically selected, if not select it in the upper left menu. Enter your client id and secret in monaco (the texteditor on the right) in this format: { \"scopes\" : [ \"user-read-playback-state\" ], \"clientId\" : \"0123456789abcdef0123456789abcdef\" , \"clientSecret\" : \"0123456789abcdef0123456789abcdef\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Note: This sample requires the user-read-playback-state scope, but you can require other scopes if you want to use functions that require them. A list of all scopes can be found here . Set the created spotify service instance to the service dependency of the spotify-current-song bundle. Select the spotify-current-song bundle and the spotify service in the left bottom menu and then select the service instance that should be used by the spotify-current-song bundle (in this case the name of the previously created spotify instance). Check the nodecg logs You should see an error or a success message and the current playing song with name and artists.","title":"Spotify sample"},{"location":"samples/spotify/#using-the-spotify-sample-bundle","text":"The spotify-current-song example bundle in samples/spotify-current-song demonstrates the ability to get the current playing song of a user. Here is a guide to how to get it working.","title":"Using the Spotify sample bundle"},{"location":"samples/spotify/#prerequisites","text":"Working NodeCG & nodecg-io installation A Spotify account and a registered Spotify application and the accosiated client id/client secret. Note: If you don't have a registered application yet you can follow this guide . As a redirect url use http://localhost:9090/nodecg-io-spotify/spotifycallback .","title":"Prerequisites"},{"location":"samples/spotify/#configure-the-spotify-sample-bundle","text":"Start nodecg with nodecg-io installed. The spotify-current-song bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new spotify service instance using the left upper menu. Enter credentials for spotify. The created instance should be automatically selected, if not select it in the upper left menu. Enter your client id and secret in monaco (the texteditor on the right) in this format: { \"scopes\" : [ \"user-read-playback-state\" ], \"clientId\" : \"0123456789abcdef0123456789abcdef\" , \"clientSecret\" : \"0123456789abcdef0123456789abcdef\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Note: This sample requires the user-read-playback-state scope, but you can require other scopes if you want to use functions that require them. A list of all scopes can be found here . Set the created spotify service instance to the service dependency of the spotify-current-song bundle. Select the spotify-current-song bundle and the spotify service in the left bottom menu and then select the service instance that should be used by the spotify-current-song bundle (in this case the name of the previously created spotify instance). Check the nodecg logs You should see an error or a success message and the current playing song with name and artists.","title":"Configure the Spotify sample bundle"},{"location":"samples/streamdeck/","text":"Using the Streamdeck rainbow sample bundle The streamdeck-rainbow bundle paints your streamdeck with different colors. It is located in samples/streamdeck-rainbow . Sadly you can't access the streamdeck while another application accesses it. So you need to stop your Streamdeck Software before. Configure the Streamdeck Rainbow bundle If you're on linux follow the instructions listed under Manual Installation here . Everything after the sudo udevadm command can be omitted. Start nodecg with nodecg-io installed. The streamdeck-rainbow bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new streamdeck service instance using the left upper menu. Enter the configuration { \"device\" : \"default\" } default tells the bundle to automatically find a streamdeck. If you've multiple streamdecks you need to put in an id here. Set the created streamdeck service instance to the service dependency of the streamdeck-rainbow bundle. Watch your streamdeck.","title":"Streamdeck sample"},{"location":"samples/streamdeck/#using-the-streamdeck-rainbow-sample-bundle","text":"The streamdeck-rainbow bundle paints your streamdeck with different colors. It is located in samples/streamdeck-rainbow . Sadly you can't access the streamdeck while another application accesses it. So you need to stop your Streamdeck Software before.","title":"Using the Streamdeck rainbow sample bundle"},{"location":"samples/streamdeck/#configure-the-streamdeck-rainbow-bundle","text":"If you're on linux follow the instructions listed under Manual Installation here . Everything after the sudo udevadm command can be omitted. Start nodecg with nodecg-io installed. The streamdeck-rainbow bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new streamdeck service instance using the left upper menu. Enter the configuration { \"device\" : \"default\" } default tells the bundle to automatically find a streamdeck. If you've multiple streamdecks you need to put in an id here. Set the created streamdeck service instance to the service dependency of the streamdeck-rainbow bundle. Watch your streamdeck.","title":"Configure the Streamdeck Rainbow bundle"},{"location":"samples/streamelements/","text":"Using the SteamElements sample bundle The streamelements-events example bundle in samples/streamelements-events demonstrates the ability to react to events like donations and subs. Here is a guide to how to get it working. Prerequisites Working NodeCG & nodecg-io installation A StreamElements account Getting JWT Token To use the StreamElements service you need a JWT Token that gives it access to your account. To get it goto https://streamelements.com/dashboard/account/channels, login, click on Show Secrets and copy it. Configure the SteamElements sample bundle Start nodecg with nodecg-io installed. The streamelements-events bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new StreamElements service instance using the left upper menu. Enter credentials for StreamElements. The created instance should be automatically selected, if not select it in the upper left menu. Enter your JWT Token in monaco (the texteditor on the right) in this format: { \"jwtToken\" : \"<your JWT Token>\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created StreamElements service instance to the service dependency of the streamelements-events bundle. Select the streamelements-events bundle and the StreamElements service in the left bottom menu and then select the service instance that should be used by the streamelements-events bundle (in this case the name of the previously created streamelements-events instance). Check the nodecg logs You should see an error or a success message and a log message for each event of your channel like subs, follows, cheers, raids and so on.","title":"StreamElements sample"},{"location":"samples/streamelements/#using-the-steamelements-sample-bundle","text":"The streamelements-events example bundle in samples/streamelements-events demonstrates the ability to react to events like donations and subs. Here is a guide to how to get it working.","title":"Using the SteamElements sample bundle"},{"location":"samples/streamelements/#prerequisites","text":"Working NodeCG & nodecg-io installation A StreamElements account","title":"Prerequisites"},{"location":"samples/streamelements/#getting-jwt-token","text":"To use the StreamElements service you need a JWT Token that gives it access to your account. To get it goto https://streamelements.com/dashboard/account/channels, login, click on Show Secrets and copy it.","title":"Getting JWT Token"},{"location":"samples/streamelements/#configure-the-steamelements-sample-bundle","text":"Start nodecg with nodecg-io installed. The streamelements-events bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new StreamElements service instance using the left upper menu. Enter credentials for StreamElements. The created instance should be automatically selected, if not select it in the upper left menu. Enter your JWT Token in monaco (the texteditor on the right) in this format: { \"jwtToken\" : \"<your JWT Token>\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created StreamElements service instance to the service dependency of the streamelements-events bundle. Select the streamelements-events bundle and the StreamElements service in the left bottom menu and then select the service instance that should be used by the streamelements-events bundle (in this case the name of the previously created streamelements-events instance). Check the nodecg logs You should see an error or a success message and a log message for each event of your channel like subs, follows, cheers, raids and so on.","title":"Configure the SteamElements sample bundle"},{"location":"samples/telegram/","text":"Using the telegram sample bundle The telegram sample bundle in samples/telegram-bot shows how to create a simple command. Prerequisites Working NodeCG & nodecg-io installation A telegram bot API token. You can create your bot here . Configure the telegram sample bundle Start nodecg with nodecg-io installed. The telegram bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new telegram service instance using the left upper menu. Enter the token and set polling to true. The created instance should be automatically selected, if not select it in the upper left menu. Enter your host and port in monaco (the text-editor on the right) in this format: { \"token\" : \"[TOKEN]\" , \"polling\" : true } After entering it, click save. Set the created telegram service instance to the service dependency of the telegram bundle. You can send \"/test\" to your bot and it should respond with two messages.","title":"Telegram sample"},{"location":"samples/telegram/#using-the-telegram-sample-bundle","text":"The telegram sample bundle in samples/telegram-bot shows how to create a simple command.","title":"Using the telegram sample bundle"},{"location":"samples/telegram/#prerequisites","text":"Working NodeCG & nodecg-io installation A telegram bot API token. You can create your bot here .","title":"Prerequisites"},{"location":"samples/telegram/#configure-the-telegram-sample-bundle","text":"Start nodecg with nodecg-io installed. The telegram bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new telegram service instance using the left upper menu. Enter the token and set polling to true. The created instance should be automatically selected, if not select it in the upper left menu. Enter your host and port in monaco (the text-editor on the right) in this format: { \"token\" : \"[TOKEN]\" , \"polling\" : true } After entering it, click save. Set the created telegram service instance to the service dependency of the telegram bundle. You can send \"/test\" to your bot and it should respond with two messages.","title":"Configure the telegram sample bundle"},{"location":"samples/tiane/","text":"Using the TIANE-Discord sample bundle The TIANE-Discord example bundle in samples/tiane-discord shows how to make tiane act as a discord bot. TIANE is a german open source smart home assistant written in python. Here is a guide to how to get it working. Prerequisites Working NodeCG & nodecg-io installation A working TIANE server installation. (No room client required) a Discord Bot token Configure the TIANE sample bundle Edit the file samples/tiane-discord/extension/index.ts . Look for this line const discordChannel = \"\"; // Insert channel for the discord bot here and put the channel id of a discord channel where you want to talk to TIANE between the quotation marks. See here to find out how to get a channel id. Run npm run build in the main nodecg-io directory. Edit the file server/TIANE_config.json on your TIANE server: { \"websocket\" : \"enabled\" , \"websocket_port\" : 19526 , \"websocket_timeout\" : 20 } Make sure websocket is either set to enabled or secure and set a port of your desire. Start nodecg with nodecg-io installed. The TIANE-Discord bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new TIANE service instance using the left upper menu. Enter address of the TIANE-Server The created instance should be automatically selected, if not select it in the upper left menu. Enter the host and the port you just set in server/TIANE_config.json in this format: { \"address\" : \"127.0.0.1:19526\" } After entering it, click save. Note: If you don't see the editor on the right, try reloading the page. Create a new Discord service instance. (See the Discord Sample on how to do this) Set the created TIANE and Discord service instances to the service dependency of the TIANE-Discord bundle. Select the TIANE-Discord bundle and the TIANE service in the left bottom menu and then select the service instance that should be used by the TIANE-Discord bundle (in this case the name of the previously created twitch instance). Then do the ame for the discord bundle. Ping your discord bot in the channel you set in the first step and ask tiane something.","title":"TIANE sample"},{"location":"samples/tiane/#using-the-tiane-discord-sample-bundle","text":"The TIANE-Discord example bundle in samples/tiane-discord shows how to make tiane act as a discord bot. TIANE is a german open source smart home assistant written in python. Here is a guide to how to get it working.","title":"Using the TIANE-Discord sample bundle"},{"location":"samples/tiane/#prerequisites","text":"Working NodeCG & nodecg-io installation A working TIANE server installation. (No room client required) a Discord Bot token","title":"Prerequisites"},{"location":"samples/tiane/#configure-the-tiane-sample-bundle","text":"Edit the file samples/tiane-discord/extension/index.ts . Look for this line const discordChannel = \"\"; // Insert channel for the discord bot here and put the channel id of a discord channel where you want to talk to TIANE between the quotation marks. See here to find out how to get a channel id. Run npm run build in the main nodecg-io directory. Edit the file server/TIANE_config.json on your TIANE server: { \"websocket\" : \"enabled\" , \"websocket_port\" : 19526 , \"websocket_timeout\" : 20 } Make sure websocket is either set to enabled or secure and set a port of your desire. Start nodecg with nodecg-io installed. The TIANE-Discord bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new TIANE service instance using the left upper menu. Enter address of the TIANE-Server The created instance should be automatically selected, if not select it in the upper left menu. Enter the host and the port you just set in server/TIANE_config.json in this format: { \"address\" : \"127.0.0.1:19526\" } After entering it, click save. Note: If you don't see the editor on the right, try reloading the page. Create a new Discord service instance. (See the Discord Sample on how to do this) Set the created TIANE and Discord service instances to the service dependency of the TIANE-Discord bundle. Select the TIANE-Discord bundle and the TIANE service in the left bottom menu and then select the service instance that should be used by the TIANE-Discord bundle (in this case the name of the previously created twitch instance). Then do the ame for the discord bundle. Ping your discord bot in the channel you set in the first step and ask tiane something.","title":"Configure the TIANE sample bundle"},{"location":"samples/twitch-addons/","text":"Using the Twitch-Addons sample bundle The Twitch-Addons example bundle in samples/twitch-addons demonstrates the ability to send requests to the APIs of BetterTTV , and FrankerFaceZ . Prerequisites Working NodeCG & nodecg-io installation a Twitch oAuth-Key Note: If you don't have such a key yet you can generate it on https://twitchapps.com/tmi/. Just log into your Twitch account and copy the token. You can also use any other token. There are no special scope requirements as the token is only used to convert channel names to ids. Configure the Twitch-Addons sample bundle Start nodecg with nodecg-io installed. The Twitch-Addons bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new twitch-addons service instance using the left upper menu. Enter credentials for twitch. The created instance should be automatically selected, if not select it in the upper left menu. Enter your Twitch oauth Key in monaco (the texteditor on the right) in this format: ```json { \"oauthKey\": \"oauth:abcdef....\" } ``` After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created twitch-addons service instance to the service dependency of the twitch-addons bundle. Select the twitch-addons bundle and the twitch-addons service in the left bottom menu and then select the service instance that should be used by the bundle (in this case the name of the previously created twitch-addons instance). Check the nodecg logs You should see an error or a success message and all BTTV and FFZ emotes from the twitch channel #derniklaas","title":"Twitch-Addons sample"},{"location":"samples/twitch-addons/#using-the-twitch-addons-sample-bundle","text":"The Twitch-Addons example bundle in samples/twitch-addons demonstrates the ability to send requests to the APIs of BetterTTV , and FrankerFaceZ .","title":"Using the Twitch-Addons sample bundle"},{"location":"samples/twitch-addons/#prerequisites","text":"Working NodeCG & nodecg-io installation a Twitch oAuth-Key Note: If you don't have such a key yet you can generate it on https://twitchapps.com/tmi/. Just log into your Twitch account and copy the token. You can also use any other token. There are no special scope requirements as the token is only used to convert channel names to ids.","title":"Prerequisites"},{"location":"samples/twitch-addons/#configure-the-twitch-addons-sample-bundle","text":"Start nodecg with nodecg-io installed. The Twitch-Addons bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new twitch-addons service instance using the left upper menu. Enter credentials for twitch. The created instance should be automatically selected, if not select it in the upper left menu. Enter your Twitch oauth Key in monaco (the texteditor on the right) in this format: ```json { \"oauthKey\": \"oauth:abcdef....\" } ``` After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created twitch-addons service instance to the service dependency of the twitch-addons bundle. Select the twitch-addons bundle and the twitch-addons service in the left bottom menu and then select the service instance that should be used by the bundle (in this case the name of the previously created twitch-addons instance). Check the nodecg logs You should see an error or a success message and all BTTV and FFZ emotes from the twitch channel #derniklaas","title":"Configure the Twitch-Addons sample bundle"},{"location":"samples/twitch-api/","text":"Using the Twitch Api sample bundle The twitch-api example bundle in samples/twitch-api demonstrates the ability to access the twitch api (kraken/helix). Here is a guide to how to get it working. Prerequisites Working NodeCG & nodecg-io installation a Twitch oAuth-Key Note: If you don't have such a key yet you can generate it on https://twitchtokengenerator.com/, select custom scope token and select the scopes you need. For this sample you don't need any additional scopes so you can leave everything off. Configure the Twitch Api sample bundle Start nodecg with nodecg-io installed. The twitch-api bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new twitch-api service instance using the left upper menu. Enter credentials for the twitch api. The created instance should be automatically selected, if not select it in the upper left menu. Enter your Twitch oauth Key in monaco (the texteditor on the right) in this format: { \"oauthKey\" : \"oauth:abcdef....\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created twitch-api service instance to the service dependency of the twitch-api bundle. Select the twitch-api bundle and the twitch-api service in the left bottom menu and then select the service instance that should be used by the twitch-api sample bundle (in this case the name of the previously created twitch-api instance). Check the nodecg logs You should see an error or a success message and you current username, how many people you follow and if you are currently streaming.","title":"Twitch-Api sample"},{"location":"samples/twitch-api/#using-the-twitch-api-sample-bundle","text":"The twitch-api example bundle in samples/twitch-api demonstrates the ability to access the twitch api (kraken/helix). Here is a guide to how to get it working.","title":"Using the Twitch Api sample bundle"},{"location":"samples/twitch-api/#prerequisites","text":"Working NodeCG & nodecg-io installation a Twitch oAuth-Key Note: If you don't have such a key yet you can generate it on https://twitchtokengenerator.com/, select custom scope token and select the scopes you need. For this sample you don't need any additional scopes so you can leave everything off.","title":"Prerequisites"},{"location":"samples/twitch-api/#configure-the-twitch-api-sample-bundle","text":"Start nodecg with nodecg-io installed. The twitch-api bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new twitch-api service instance using the left upper menu. Enter credentials for the twitch api. The created instance should be automatically selected, if not select it in the upper left menu. Enter your Twitch oauth Key in monaco (the texteditor on the right) in this format: { \"oauthKey\" : \"oauth:abcdef....\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created twitch-api service instance to the service dependency of the twitch-api bundle. Select the twitch-api bundle and the twitch-api service in the left bottom menu and then select the service instance that should be used by the twitch-api sample bundle (in this case the name of the previously created twitch-api instance). Check the nodecg logs You should see an error or a success message and you current username, how many people you follow and if you are currently streaming.","title":"Configure the Twitch Api sample bundle"},{"location":"samples/twitch-chat/","text":"Using the Twitch sample bundle The Twitch-chat example bundle in samples/twitch-chat demonstrates the ability to get access to a twitch chat and printing all messages of it. Here is a guide to how to get it working. Prerequisites Working NodeCG & nodecg-io installation a Twitch oAuth-Key Note: If you don't have such a key yet you can generate it on https://twitchapps.com/tmi/. Just log into your Twitch account and copy the token. Configure the Twitch sample bundle Start nodecg with nodecg-io installed. The Twitch-chat bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new twitch-chat service instance using the left upper menu. Enter credentials for twitch. The created instance should be automatically selected, if not select it in the upper left menu. Enter your Twitch oauth Key in monaco (the texteditor on the right) in this format: { \"oauthKey\" : \"oauth:abcdef....\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created twitch-chat service instance to the service dependency of the Twitch-chat bundle. Select the Twitch-chat bundle and the twitch-chat service in the left bottom menu and then select the service instance that should be used by the Twitch-chat bundle (in this case the name of the previously created twitch-chat instance). Check the nodecg logs You should see an error or a success message and all twitch messages that are written in the twitch channel that is hardcoded in samples/twitch-chat/extension/index.ts .","title":"Twitch-Chat sample"},{"location":"samples/twitch-chat/#using-the-twitch-sample-bundle","text":"The Twitch-chat example bundle in samples/twitch-chat demonstrates the ability to get access to a twitch chat and printing all messages of it. Here is a guide to how to get it working.","title":"Using the Twitch sample bundle"},{"location":"samples/twitch-chat/#prerequisites","text":"Working NodeCG & nodecg-io installation a Twitch oAuth-Key Note: If you don't have such a key yet you can generate it on https://twitchapps.com/tmi/. Just log into your Twitch account and copy the token.","title":"Prerequisites"},{"location":"samples/twitch-chat/#configure-the-twitch-sample-bundle","text":"Start nodecg with nodecg-io installed. The Twitch-chat bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new twitch-chat service instance using the left upper menu. Enter credentials for twitch. The created instance should be automatically selected, if not select it in the upper left menu. Enter your Twitch oauth Key in monaco (the texteditor on the right) in this format: { \"oauthKey\" : \"oauth:abcdef....\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created twitch-chat service instance to the service dependency of the Twitch-chat bundle. Select the Twitch-chat bundle and the twitch-chat service in the left bottom menu and then select the service instance that should be used by the Twitch-chat bundle (in this case the name of the previously created twitch-chat instance). Check the nodecg logs You should see an error or a success message and all twitch messages that are written in the twitch channel that is hardcoded in samples/twitch-chat/extension/index.ts .","title":"Configure the Twitch sample bundle"},{"location":"samples/twitch-pubsub/","text":"Using the Twitch PubSub sample bundle The twitch-pubsub example bundle in samples/twitch-pubsub demonstrates the ability to use the twitch pubsub api. Here is a guide to how to get it working. Prerequisites Working NodeCG & nodecg-io installation a Twitch oAuth-Key Note: If you don't have such a key yet you can generate it on https://twitchtokengenerator.com/, select custom scope token and select these scopes: channel_subscriptions , bits:read and channel:read:redemptions Configure the Twitch PubSub sample bundle Start nodecg with nodecg-io installed. The twitch-pubsub sample bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new twitch-pubsub service instance using the left upper menu. Enter credentials for twitch pubsub. The created instance should be automatically selected, if not select it in the upper left menu. Enter your Twitch oauth Key in monaco (the texteditor on the right) in this format: { \"oauthKey\" : \"oauth:abcdef....\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created twitch-pubsub service instance to the service dependency of the twitch-pubsub sample bundle. Select the twitch-pubsub sample bundle and the twitch-pubsub service in the left bottom menu and then select the service instance that should be used by the twitch-pubsub sample bundle (in this case the name of the previously created twitch-pubsub instance). Check the nodecg logs You should see an error or a success message and a log entry for each subscription, bits, bits badge unlock and channel point redemption event.","title":"Twitch-Pubsub sample"},{"location":"samples/twitch-pubsub/#using-the-twitch-pubsub-sample-bundle","text":"The twitch-pubsub example bundle in samples/twitch-pubsub demonstrates the ability to use the twitch pubsub api. Here is a guide to how to get it working.","title":"Using the Twitch PubSub sample bundle"},{"location":"samples/twitch-pubsub/#prerequisites","text":"Working NodeCG & nodecg-io installation a Twitch oAuth-Key Note: If you don't have such a key yet you can generate it on https://twitchtokengenerator.com/, select custom scope token and select these scopes: channel_subscriptions , bits:read and channel:read:redemptions","title":"Prerequisites"},{"location":"samples/twitch-pubsub/#configure-the-twitch-pubsub-sample-bundle","text":"Start nodecg with nodecg-io installed. The twitch-pubsub sample bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new twitch-pubsub service instance using the left upper menu. Enter credentials for twitch pubsub. The created instance should be automatically selected, if not select it in the upper left menu. Enter your Twitch oauth Key in monaco (the texteditor on the right) in this format: { \"oauthKey\" : \"oauth:abcdef....\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created twitch-pubsub service instance to the service dependency of the twitch-pubsub sample bundle. Select the twitch-pubsub sample bundle and the twitch-pubsub service in the left bottom menu and then select the service instance that should be used by the twitch-pubsub sample bundle (in this case the name of the previously created twitch-pubsub instance). Check the nodecg logs You should see an error or a success message and a log entry for each subscription, bits, bits badge unlock and channel point redemption event.","title":"Configure the Twitch PubSub sample bundle"},{"location":"samples/twitter/","text":"Using the twitter sample bundle The Twitter timeline bundle retrieves some of the latest tweets from skate702 and printing them to your console. Prerequisites Working NodeCG & nodecg-io installation An app and their following keys and tokens The API key here oauthConsumerKey The API secret key here oauthConsumerSecret The Access token here oauthToken The Access token secret here oauthTokenSecret Note: You will need a twitter developer account (https://developer.twitter.com/en/apply-for-access) to get the necessary keys and tokens. Configure the sample bundle Start nodecg with nodecg-io installed. The twitter-timeline bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new twitter service instance using the left upper menu. Enter credentials for twitter. The created instance should be automatically selected, if not select it in the upper left menu. Enter your Twitter keys and tokens in monaco (the text-editor on the right) in this format: { \"oauthConsumerKey\" : \"<API key>\" , \"oauthConsumerSecret\" : \"<API secret key>\" , \"oauthToken\" : \"<Access token>\" , \"oauthTokenSecret\" : \"<Access token secret>\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created twitter service instance to the service dependency of the twitter-timeline bundle. Select the twitter-timeline bundle and the twitter service in the left bottom menu and then select the service instance that should be used by the twitter-timeline bundle (in this case the name of the previously created twitter instance). Check the nodecg logs You should see an error or a success message and up to 50 twitter messages tweeted by the user that is hardcoded in samples/twitter-timeline/extension/index.ts as screen_name . Need to know for creating your own twitter bundle A little description of the twitter client and it's usage The client implements the different API endpoints with two functions client . get ( \"<get endpoint name>\" , params , callback ) client . post ( \"<post endpoint name>\" , params , callback ) // Instead of callbacks it can be used with promises client . get ( \"statuses/user_timeline\" , { screen_name : \"skate702\" }) . then (( tweets ) => /* Do something with the tweets */ ) . catch (( error ) => /* Handle error */ ); // Or async and await as well try { const tweets = await client . get ( \"statuses/user_timeline\" , { screen_name : \"skate702\" }); // Do something with the tweets } catch ( error ) { // Handle error } A more precise description of what can be done with this twitter client can be found here","title":"Twitter sample"},{"location":"samples/twitter/#using-the-twitter-sample-bundle","text":"The Twitter timeline bundle retrieves some of the latest tweets from skate702 and printing them to your console.","title":"Using the twitter sample bundle"},{"location":"samples/twitter/#prerequisites","text":"Working NodeCG & nodecg-io installation An app and their following keys and tokens The API key here oauthConsumerKey The API secret key here oauthConsumerSecret The Access token here oauthToken The Access token secret here oauthTokenSecret Note: You will need a twitter developer account (https://developer.twitter.com/en/apply-for-access) to get the necessary keys and tokens.","title":"Prerequisites"},{"location":"samples/twitter/#configure-the-sample-bundle","text":"Start nodecg with nodecg-io installed. The twitter-timeline bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new twitter service instance using the left upper menu. Enter credentials for twitter. The created instance should be automatically selected, if not select it in the upper left menu. Enter your Twitter keys and tokens in monaco (the text-editor on the right) in this format: { \"oauthConsumerKey\" : \"<API key>\" , \"oauthConsumerSecret\" : \"<API secret key>\" , \"oauthToken\" : \"<Access token>\" , \"oauthTokenSecret\" : \"<Access token secret>\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created twitter service instance to the service dependency of the twitter-timeline bundle. Select the twitter-timeline bundle and the twitter service in the left bottom menu and then select the service instance that should be used by the twitter-timeline bundle (in this case the name of the previously created twitter instance). Check the nodecg logs You should see an error or a success message and up to 50 twitter messages tweeted by the user that is hardcoded in samples/twitter-timeline/extension/index.ts as screen_name .","title":"Configure the sample bundle"},{"location":"samples/twitter/#need-to-know-for-creating-your-own-twitter-bundle","text":"","title":"Need to know for creating your own twitter bundle"},{"location":"samples/twitter/#a-little-description-of-the-twitter-client-and-its-usage","text":"The client implements the different API endpoints with two functions client . get ( \"<get endpoint name>\" , params , callback ) client . post ( \"<post endpoint name>\" , params , callback ) // Instead of callbacks it can be used with promises client . get ( \"statuses/user_timeline\" , { screen_name : \"skate702\" }) . then (( tweets ) => /* Do something with the tweets */ ) . catch (( error ) => /* Handle error */ ); // Or async and await as well try { const tweets = await client . get ( \"statuses/user_timeline\" , { screen_name : \"skate702\" }); // Do something with the tweets } catch ( error ) { // Handle error }","title":"A little description of the twitter client and it's usage"},{"location":"samples/twitter/#a-more-precise-description-of-what-can-be-done-with-this-twitter-client-can-be-found-here","text":"","title":"A more precise description of what can be done with this twitter client can be found here"},{"location":"samples/websocket-client/","text":"Using the WebSocket-client sample bundle The WebSocket-client sample bundle in samples/websocket-client shows how to setup a simple WebSocket client that will ping a server every second. Prerequisites Working NodeCG & nodecg-io installation For simplicity sake this sample will rely upon the websocket-server sample. Configure the WebSocket-client sample bundle Please setup the WebSocket-server bundle first and then follow these steps: Start nodecg with nodecg-io installed. The websocket-client bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new ws-client service instance using the left upper menu. Enter the address of the sample server. This has to be a url following the pattern ws://localhost:<port> . The created instance should be automatically selected, if not select it in the upper left menu. Enter your port in monaco (the texteditor on the right) in this format: { \"address\" : \"ws://localhost:7777\" } After entering it, click save. Set the created ws-client service instance to the service dependency of the ws-client bundle. A websocket-client has been connected and the console should display if a ping is sent or a pong is recieved.","title":"Client sample"},{"location":"samples/websocket-client/#using-the-websocket-client-sample-bundle","text":"The WebSocket-client sample bundle in samples/websocket-client shows how to setup a simple WebSocket client that will ping a server every second.","title":"Using the WebSocket-client sample bundle"},{"location":"samples/websocket-client/#prerequisites","text":"Working NodeCG & nodecg-io installation For simplicity sake this sample will rely upon the websocket-server sample.","title":"Prerequisites"},{"location":"samples/websocket-client/#configure-the-websocket-client-sample-bundle","text":"Please setup the WebSocket-server bundle first and then follow these steps: Start nodecg with nodecg-io installed. The websocket-client bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new ws-client service instance using the left upper menu. Enter the address of the sample server. This has to be a url following the pattern ws://localhost:<port> . The created instance should be automatically selected, if not select it in the upper left menu. Enter your port in monaco (the texteditor on the right) in this format: { \"address\" : \"ws://localhost:7777\" } After entering it, click save. Set the created ws-client service instance to the service dependency of the ws-client bundle. A websocket-client has been connected and the console should display if a ping is sent or a pong is recieved.","title":"Configure the WebSocket-client sample bundle"},{"location":"samples/websocket-server/","text":"Using the WebSocket Server sample bundle The WebSocket-server sample bundle in samples/websocket-server shows how to setup a simple WebSocket server that will relay all incoming messages to all connected clients. Prerequisites Working NodeCG & nodecg-io installation Configure the websocket-server sample bundle Start nodecg with nodecg-io installed. The websocket-server bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new ws-server service instance using the left upper menu. Enter a port for the server. This has to be a number from 0 to 65535. The created instance should be automatically selected, if not select it in the upper left menu. Enter your port in monaco (the texteditor on the right) in this format: { \"port\" : 7777 } After entering it, click save. Set the created ws-server service instance to the service dependency of the ws-server bundle. A websocket-server has been started at the specified port.","title":"Server sample"},{"location":"samples/websocket-server/#using-the-websocket-server-sample-bundle","text":"The WebSocket-server sample bundle in samples/websocket-server shows how to setup a simple WebSocket server that will relay all incoming messages to all connected clients.","title":"Using the WebSocket Server sample bundle"},{"location":"samples/websocket-server/#prerequisites","text":"Working NodeCG & nodecg-io installation","title":"Prerequisites"},{"location":"samples/websocket-server/#configure-the-websocket-server-sample-bundle","text":"Start nodecg with nodecg-io installed. The websocket-server bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new ws-server service instance using the left upper menu. Enter a port for the server. This has to be a number from 0 to 65535. The created instance should be automatically selected, if not select it in the upper left menu. Enter your port in monaco (the texteditor on the right) in this format: { \"port\" : 7777 } After entering it, click save. Set the created ws-server service instance to the service dependency of the ws-server bundle. A websocket-server has been started at the specified port.","title":"Configure the websocket-server sample bundle"},{"location":"samples/xdotool/","text":"Using the Xdotool sample bundle The Xdotool sample bundle in samples/xdotool-windowminimize shows how to use the xdotool service to execute xdotool commands by minimizing the currently active window. Prerequisites Working NodeCG & nodecg-io installation xdotool installed (Only works on linux) Configure the Xdotool sample bundle Start nodecg with nodecg-io installed. The xdotool bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new xdotool service instance using the left upper menu. Enter settings port -1 tells nodecg-io to use a locally installed xdotool. The created instance should be automatically selected, if not select it in the upper left menu. Configure local xdotool in monaco (the text-editor on the right) using this config: { \"host\" : \"127.0.0.1\" , \"port\" : -1 } After entering it, click save. Set the created xdotool service instance to the service dependency of the xdotool bundle. Your browser window should get minimized.","title":"Xdotool sample"},{"location":"samples/xdotool/#using-the-xdotool-sample-bundle","text":"The Xdotool sample bundle in samples/xdotool-windowminimize shows how to use the xdotool service to execute xdotool commands by minimizing the currently active window.","title":"Using the Xdotool sample bundle"},{"location":"samples/xdotool/#prerequisites","text":"Working NodeCG & nodecg-io installation xdotool installed (Only works on linux)","title":"Prerequisites"},{"location":"samples/xdotool/#configure-the-xdotool-sample-bundle","text":"Start nodecg with nodecg-io installed. The xdotool bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new xdotool service instance using the left upper menu. Enter settings port -1 tells nodecg-io to use a locally installed xdotool. The created instance should be automatically selected, if not select it in the upper left menu. Configure local xdotool in monaco (the text-editor on the right) using this config: { \"host\" : \"127.0.0.1\" , \"port\" : -1 } After entering it, click save. Set the created xdotool service instance to the service dependency of the xdotool bundle. Your browser window should get minimized.","title":"Configure the Xdotool sample bundle"},{"location":"samples/youtube/","text":"Using the youtube sample bundle The youtube bundle in samples/youtube-playlist demonstrates the ability of getting information of a playlist. Here is a guide to how to get it working. Prerequisites Working NodeCG & nodecg-io installation Google cloud API OAuth access (clientID, clientSecret) Grant YouTube Data API v3 access at the project's dashboard. Shortcut URL: https://console.developers.google.com/apis/library/youtube.googleapis.com?project=<project-id> Note: If you don't have such a key yet you can generate them like this as redirect URI add \"http://localhost:9090/nodecg-io-youtube/oauth2callback\". Configure the youtube sample bundle Start nodecg with nodecg-io installed. The youtube bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new youtube service instance using the left upper menu. Enter credentials for youtube. The created instance should be automatically selected, if not select it in the upper left menu. Enter your youtube oauth credentials in monaco (the texteditor on the right) in this format: { \"clientID\" : \"<clientID>\" , \"clientSecret\" : \"<clientSecret>\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created youtube service instance to the service dependency of the youtube bundle. Select the youtube bundle and the youtube service in the left bottom menu and then select the service instance that should be used by the youtube bundle (in this case the name of the previously created youtube instance). Check the nodecg logs You should see an error or a success message that is hardcoded in samples/youtube/extension/index.ts .","title":"YouTube sample"},{"location":"samples/youtube/#using-the-youtube-sample-bundle","text":"The youtube bundle in samples/youtube-playlist demonstrates the ability of getting information of a playlist. Here is a guide to how to get it working.","title":"Using the youtube sample bundle"},{"location":"samples/youtube/#prerequisites","text":"Working NodeCG & nodecg-io installation Google cloud API OAuth access (clientID, clientSecret) Grant YouTube Data API v3 access at the project's dashboard. Shortcut URL: https://console.developers.google.com/apis/library/youtube.googleapis.com?project=<project-id> Note: If you don't have such a key yet you can generate them like this as redirect URI add \"http://localhost:9090/nodecg-io-youtube/oauth2callback\".","title":"Prerequisites"},{"location":"samples/youtube/#configure-the-youtube-sample-bundle","text":"Start nodecg with nodecg-io installed. The youtube bundle is currently part of it so it should also be loaded. Go to the nodecg-io tab in the nodecg dashboard. Login using your password. If this is your first run, then enter the password with which you want to encrypt your configurations and credentials. Create a new youtube service instance using the left upper menu. Enter credentials for youtube. The created instance should be automatically selected, if not select it in the upper left menu. Enter your youtube oauth credentials in monaco (the texteditor on the right) in this format: { \"clientID\" : \"<clientID>\" , \"clientSecret\" : \"<clientSecret>\" } After entering it, click save. Note: If you don't see monaco on the right, try reloading the page. Set the created youtube service instance to the service dependency of the youtube bundle. Select the youtube bundle and the youtube service in the left bottom menu and then select the service instance that should be used by the youtube bundle (in this case the name of the previously created youtube instance). Check the nodecg logs You should see an error or a success message that is hardcoded in samples/youtube/extension/index.ts .","title":"Configure the youtube sample bundle"}]}